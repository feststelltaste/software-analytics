concept_type,concept_name,concept_description,file_path,file_name,score,explanation,code_length,concept_group
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingUserResponseModel.java,AddSchedulingUserResponseModel.java,1.0,"This class is explicitly named `AddSchedulingUserResponseModel` and resides in a `boundary` package. It implements `ResponseModel`, clearly indicating its role as a data structure for communication from the core logic to an outer layer, aligning perfectly with the concept of a Boundary's Response Model.",195,Boundary/AddSchedulingUserResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodosRequestModel.java,GetTodosRequestModel.java,0.9,"This class is explicitly named `GetTodosRequestModel` and resides in a `boundary` package, aligning perfectly with the concept's description of a Request Model within the Boundary layer. Its purpose is clearly to carry data for a ""Get Todos"" operation from an outer layer to an Interactor.",175,Boundary/GetTodosRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingResponseModel.java,GetSchedulingResponseModel.java,1.0,"This class is explicitly named `GetSchedulingResponseModel` and resides in a `boundary` package. It implements `ResponseModel`, indicating its role as a data structure for output from an interactor to an outer layer, perfectly aligning with the ""Boundary"" concept's description of defining interfaces for communication and including Response Models.",416,Boundary/GetSchedulingResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/DeleteSchedulingUserRequestModel.java,DeleteSchedulingUserRequestModel.java,1.0,"This code perfectly aligns with the ""Boundary"" concept. It defines a `RequestModel` which is explicitly part of the boundary layer, intended for communication from an outer layer (e.g., UI) to the core business logic (Interactor). Its fields represent the data needed for a specific operation, fulfilling the role of a request model.",253,Boundary/DeleteSchedulingUserRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodosResponseModel.java,GetTodosResponseModel.java,1.0,"This class is explicitly named `GetTodosResponseModel` and resides in a `boundary` package. It implements `ResponseModel`, indicating its role as a data structure for communication from the core logic to an outer layer, perfectly aligning with the ""Boundary"" concept's description of defining interfaces for communication and including Response Models.",214,Boundary/GetTodosResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/mail/boundary/SendMailToCreatorResponseModel.java,SendMailToCreatorResponseModel.java,0.9,"This class is explicitly named `SendMailToCreatorResponseModel` and resides in a `boundary` package, aligning perfectly with the concept's description of a Response Model within a Boundary. It also implements `ResponseModel`, further solidifying its role.",164,Boundary/SendMailToCreatorResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetAllTodosResponse.java,GetAllTodosResponse.java,0.0,SCORE,209,Boundary/GetAllTodosResponse.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/ChangeCommentRequestModel.java,ChangeCommentRequestModel.java,1.0,"This class is clearly a Request Model, part of a boundary. It defines the data needed to initiate a change comment operation, which is precisely the role of a Request Model in a Boundary. Its location within a `boundary` package further reinforces this.",240,Boundary/ChangeCommentRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentsRequestModel.java,GetCommentsRequestModel.java,0.9,"This class is named `GetCommentsRequestModel` and resides in a `boundary` package, clearly indicating its role as a request model for a specific operation. It extends `SiteDependentRequestModel`, suggesting it carries data for a request, aligning with the concept's description of a Request Model within the Boundary.",181,Boundary/GetCommentsRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentsResponseModel.java,GetCommentsResponseModel.java,1.0,"This class perfectly embodies a ""Response Model"" within a ""Boundary."" It's a simple data structure designed to carry data back from the core business logic (Interactor) to the outer layers, fulfilling the role of defining an interface for communication as described. Its placement in a `boundary` package further reinforces this.",223,Boundary/GetCommentsResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingDateRequestModel.java,GetSchedulingDateRequestModel.java,1.0,"This class is explicitly named `GetSchedulingDateRequestModel` and resides in a `boundary` package. It implements `RequestModel`, clearly indicating its role as a data structure for incoming requests, which is the core purpose of a Request Model within a Boundary.",223,Boundary/GetSchedulingDateRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodoRequestModel.java,GetTodoRequestModel.java,1.0,"This class is explicitly named `GetTodoRequestModel` and resides in a `boundary` package, aligning perfectly with the concept's description of a Request Model within the boundary layer. It defines the data required for a specific operation (getting a todo), which is its intended role.",123,Boundary/GetTodoRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodoListResponseModel.java,GetTodoListResponseModel.java,1.0,"This class is explicitly named `GetTodoListResponseModel` and resides in a `boundary` package. It implements `ResponseModel`, clearly indicating its role as a data structure for communication from the core business logic to an outer layer, aligning perfectly with the ""Boundary"" concept's description of including Response Models for inter-layer communication.",259,Boundary/GetTodoListResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/ReportAbuseRequestModel.java,ReportAbuseRequestModel.java,1.0,"This class is clearly a Request Model, part of the boundary layer. It defines the data structure needed for an incoming request (reporting abuse), aligning perfectly with the concept's description of providing interfaces for communication between outer layers and interactors.",298,Boundary/ReportAbuseRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/creator/boundary/CreatorData.java,CreatorData.java,1.0,"This `CreatorData` class acts as a `ResponseModel`, clearly defining the data structure returned from the core business logic (likely an Interactor) to an outer layer. It encapsulates specific `Creator` entity data for presentation, aligning perfectly with the Boundary concept's role in separating concerns and defining communication interfaces.",454,Boundary/CreatorData.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingDateRequestModel.java,AddSchedulingDateRequestModel.java,1.0,"This class is explicitly named `AddSchedulingDateRequestModel` and resides in a `boundary` package. It implements `RequestModel`, clearly indicating its role as a data structure for incoming requests, which is a core component of the Boundary concept.",227,Boundary/AddSchedulingDateRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodoListRequestModel.java,GetTodoListRequestModel.java,0.9,"The file is located in a 'boundary' package and is named 'GetTodoListRequestModel', clearly indicating its role as a request model for a specific operation. Its inheritance from 'TodoRequestModel' further suggests a structured approach to defining request interfaces, aligning with the concept's intent to define communication interfaces.",103,Boundary/GetTodoListRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/VoteForSchedulingDateResponseModel.java,VoteForSchedulingDateResponseModel.java,0.9,"This class is named `VoteForSchedulingDateResponseModel` and resides in a `boundary` package, clearly indicating its role as a Response Model within the boundary layer. It also implements `ResponseModel`, reinforcing its adherence to the concept. While empty, its mere existence and naming align perfectly with the concept's definition of a Response Model.",174,Boundary/VoteForSchedulingDateResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/GetSiteResponseModel.java,GetSiteResponseModel.java,1.0,"This class is explicitly named `GetSiteResponseModel` and resides in a `boundary` package. It implements `ResponseModel`, indicating its role as a data structure for communication from the core business logic to outer layers, perfectly aligning with the concept's description of a Response Model within the Boundary.",331,Boundary/GetSiteResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/DownloadFileResponseModel.java,DownloadFileResponseModel.java,1.0,"This class clearly acts as a Response Model, part of the Boundary layer. It encapsulates the data returned from an Interactor (InputStream content, originalFilename) to the outer layers, fulfilling the role of separating business logic from delivery mechanisms. Its name and content align perfectly with the concept's description.",257,Boundary/DownloadFileResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentRequestModel.java,GetCommentRequestModel.java,0.9,"This class is named `GetCommentRequestModel` and resides in a `boundary` package, clearly indicating its role as a request model for an external interaction. It extends `SiteDependentRequestModel`, suggesting it's part of a larger boundary definition, aligning with the concept's intent to define interfaces for communication.",206,Boundary/GetCommentRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/AddCommentRequestModel.java,AddCommentRequestModel.java,1.0,"This class is clearly named `AddCommentRequestModel` and resides in a `boundary` package. It extends `SiteDependentRequestModel`, suggesting it's part of a request/response mechanism. Its fields (`text`, `creatorName`) are data required for an operation, aligning perfectly with the role of a Request Model in defining the input interface for an Interactor.",289,Boundary/AddCommentRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetRangedCommentsRequestModel.java,GetRangedCommentsRequestModel.java,1.0,"This class perfectly embodies a Request Model within a Boundary. It defines the specific data needed for a ""Get Ranged Comments"" operation, acting as an interface for communication from an outer layer (e.g., UI) to the core business logic. Its inheritance from `SiteDependentRequestModel` further reinforces its role as a structured input for an interactor.",245,Boundary/GetRangedCommentsRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingsRequestModel.java,GetSchedulingsRequestModel.java,0.9,"This class is named `GetSchedulingsRequestModel` and resides in a `boundary` package, clearly indicating its role as a Request Model within the boundary layer. Its inheritance from `SiteDependentRequestModel` suggests it carries data for a specific request, aligning perfectly with the concept's description of a Request Model.",187,Boundary/GetSchedulingsRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/AddTodoRequestModel.java,AddTodoRequestModel.java,1.0,"This class, `AddTodoRequestModel`, clearly serves as a data structure for input to a business operation (adding a todo). Its location within a `boundary` package and its name align perfectly with the concept of a Request Model, which is a key component of the Boundary layer for defining communication interfaces.",239,Boundary/AddTodoRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/CreateSiteResponseModel.java,CreateSiteResponseModel.java,1.0,"This class is explicitly named `CreateSiteResponseModel` and implements `ResponseModel`, clearly indicating its role as a data structure for the response from a core business logic operation. This perfectly aligns with the ""Boundary"" concept's description of including Request and Response Models to define interfaces for communication.",253,Boundary/CreateSiteResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/DeleteTodoListRequestModel.java,DeleteTodoListRequestModel.java,0.8,"This class is named `DeleteTodoListRequestModel` and resides in a `boundary` package, strongly suggesting its role as a request model for an outer layer to communicate with an interactor. Its inheritance from `TodoRequestModel` further supports this. The empty body implies it might just be a marker or inherit all necessary fields, which is acceptable for a request model.",105,Boundary/DeleteTodoListRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/TodoData.java,TodoData.java,0.8,"The `TodoData` class is clearly a data transfer object (DTO) used for communication. Its implementation of `ResponseModel` explicitly marks it as part of the boundary layer's response mechanism, aligning with the concept's description of defining interfaces for communication and including Response Models. While it only shows the 'Response' part and not a 'Request' model, it fulfills its specific role within the boundary concept.",301,Boundary/TodoData.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetAllTodoListsResponse.java,GetAllTodoListsResponse.java,1.0,"This class clearly acts as a Response Model, a key component of a Boundary. It defines the data structure returned from an Interactor to an outer layer, fulfilling the concept's intent of separating core logic from delivery mechanisms. Its placement in a `boundary` package further reinforces this.",216,Boundary/GetAllTodoListsResponse.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/TodoRequestModel.java,TodoRequestModel.java,0.9,"This class is explicitly named `TodoRequestModel` and resides in a `boundary` package, aligning perfectly with the concept's description of a Request Model within the Boundary layer. It extends `SiteDependentRequestModel`, suggesting it's part of a larger framework for handling requests, further reinforcing its role as an interface for communication.",203,Boundary/TodoRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/GetSiteRequestModel.java,GetSiteRequestModel.java,1.0,"This code perfectly embodies the ""Boundary"" concept. It is a `RequestModel` used to pass data from an outer layer (e.g., UI) to an Interactor, defining the input interface for a specific operation (getting site information). Its location within a `boundary` package further reinforces this intent.",417,Boundary/GetSiteRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/ChangeTodoRequestModel.java,ChangeTodoRequestModel.java,1.0,"This class is explicitly named `ChangeTodoRequestModel` and resides in a `boundary` package, clearly indicating its role as a data transfer object for incoming requests. This aligns perfectly with the concept of a Request Model within the Boundary layer, facilitating communication from outer layers to the core business logic.",275,Boundary/ChangeTodoRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/ListFilesResponseModel.java,ListFilesResponseModel.java,1.0,"This class is named `ListFilesResponseModel` and resides in a `boundary` package. It implements `ResponseModel`, clearly indicating its role as a data structure for responses from the core business logic to outer layers, aligning perfectly with the ""Boundary"" concept's description of including Response Models for communication.",220,Boundary/ListFilesResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/DeleteTodoListResponseModel.java,DeleteTodoListResponseModel.java,0.9,"The class is located in a 'boundary' package and implements a 'ResponseModel' interface, aligning perfectly with the concept's description of defining interfaces for communication and including Response Models within the boundary. Its emptiness suggests it's a marker or success indicator, which is a valid form of a response model.",161,Boundary/DeleteTodoListResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingRequestModel.java,AddSchedulingRequestModel.java,1.0,"This code perfectly aligns with the ""Boundary"" concept. It defines a `RequestModel` which is explicitly part of the boundary layer, intended for communication from an outer layer (e.g., UI) to the core business logic. Its purpose is to carry data for a specific operation (`AddScheduling`), fulfilling the role of an interface for communication.",269,Boundary/AddSchedulingRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingsResponseModel.java,GetSchedulingsResponseModel.java,1.0,"This class is explicitly named `GetSchedulingsResponseModel` and resides in a `boundary` package. It implements `ResponseModel`, clearly indicating its role as a data structure for output from the core business logic to an outer layer, perfectly aligning with the ""Boundary"" concept's description of including Response Models for communication interfaces.",277,Boundary/GetSchedulingsResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/DeleteSchedulingUserResponseModel.java,DeleteSchedulingUserResponseModel.java,1.0,"The code defines a `ResponseModel` within a `boundary` package, which perfectly aligns with the concept's description of providing an interface for communication from the core business logic to outer layers. Its empty nature suggests it's a marker or success indicator, a common pattern for response models.",173,Boundary/DeleteSchedulingUserResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/UploadFileRequestModel.java,UploadFileRequestModel.java,1.0,"This class is explicitly named `UploadFileRequestModel` and resides in a `boundary` package. It contains data necessary for an ""upload file"" operation, acting as an input structure for an interactor, perfectly aligning with the ""Request Model"" aspect of the Boundary concept.",352,Boundary/UploadFileRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/VoteForSchedulingDateRequestModel.java,VoteForSchedulingDateRequestModel.java,1.0,"This class clearly acts as a Request Model, implementing the `RequestModel` interface. It defines the data structure needed for an incoming request to the core business logic (scheduling), aligning perfectly with the ""Boundary"" concept's role in defining interfaces for communication between outer layers and Interactors.",366,Boundary/VoteForSchedulingDateRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/DownloadFileRequestModel.java,DownloadFileRequestModel.java,0.9,"This class is explicitly named `DownloadFileRequestModel` and resides in a `boundary` package, aligning perfectly with the concept's description of a Request Model within the Boundary layer. It serves as a data carrier for input to an Interactor.",208,Boundary/DownloadFileRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/DeleteTodoResponseModel.java,DeleteTodoResponseModel.java,1.0,"This class is explicitly named `DeleteTodoResponseModel` and resides in a `boundary` package, aligning perfectly with the concept's description of a Response Model within the Boundary layer. Its implementation as an empty class is acceptable for a simple success response, fulfilling its role as a marker or container for data returned from the Interactor to the outer layers.",157,Boundary/DeleteTodoResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/framework/boundary/DropoverModel.java,DropoverModel.java,0.9,"This marker interface, `DropoverModel`, explicitly defines itself as a parent for `RequestModel` and `ResponseModel`, which are the core components of the Boundary concept. Its purpose is to generalize these models for communication with delivery mechanisms, directly aligning with the concept's intent of separating core logic from outer layers.",491,Boundary/DropoverModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/ReportAbuseResponeModel.java,ReportAbuseResponeModel.java,0.9,"The `ReportAbuseResponseModel` is located within a `boundary` package and implements `ResponseModel`, directly aligning with the concept's description of a Response Model within the Boundary layer. It serves as an interface for communication from the core business logic to outer layers.",156,Boundary/ReportAbuseResponeModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetAllTodoListsRequest.java,GetAllTodoListsRequest.java,0.9,"This class is located in a 'boundary' package and is named 'GetAllTodoListsRequest', clearly indicating its role as a request model for an outer layer to interact with the core logic. Its inheritance from `SiteDependentRequestModel` further suggests it's part of a defined request structure. It aligns well with the concept's intent of defining an interface for communication.",177,Boundary/GetAllTodoListsRequest.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/framework/boundary/RequestModel.java,RequestModel.java,0.8,"This code defines a `RequestModel` interface, which is a key component of the Boundary concept. It serves as a marker interface for data structures passed into Interactors, aligning with the idea of defining interfaces for communication. The `DropoverModel` inheritance suggests a broader framework for data models, which is consistent with the concept's intent.",237,Boundary/RequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingRequestModel.java,GetSchedulingRequestModel.java,1.0,"This class is clearly a Request Model, as indicated by its name and its role in carrying data for a ""GetScheduling"" operation. It extends `SiteDependentRequestModel`, further solidifying its role as an input data structure for a boundary interface. This perfectly aligns with the ""Boundary"" concept's description of including Request Models for communication.",256,Boundary/GetSchedulingRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/SetFinalDateRequestModel.java,SetFinalDateRequestModel.java,1.0,"This class is explicitly named `SetFinalDateRequestModel` and resides in a `boundary` package. It implements `RequestModel`, clearly indicating its role as a data structure for incoming requests, which is a core component of the Boundary concept.",257,Boundary/SetFinalDateRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/mail/boundary/SendMailToCreatorRequestModel.java,SendMailToCreatorRequestModel.java,1.0,"This class is explicitly named `SendMailToCreatorRequestModel` and resides in a `boundary` package, clearly indicating its role as a Request Model. It implements `RequestModel`, further solidifying its intent to define the input interface for a specific operation, aligning perfectly with the ""Boundary"" concept's description of including Request Models for communication between layers.",464,Boundary/SendMailToCreatorRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/AddTodoListRequest.java,AddTodoListRequest.java,1.0,"This class is explicitly named `AddTodoListRequest` and resides in a `boundary` package, clearly indicating its role as a Request Model for an external interaction. It extends `SiteDependentRequestModel`, further reinforcing its purpose as an interface for communication from an outer layer to the core business logic. This perfectly aligns with the ""Boundary"" concept's description of including Request Models for communication.",201,Boundary/AddTodoListRequest.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentResponseModel.java,GetCommentResponseModel.java,1.0,"This code perfectly embodies the ""Boundary"" concept. It's a `ResponseModel` specifically for `GetComment`, defining the data structure (`CommentData`) returned from the core business logic to the outer layers. This clearly separates the internal data representation from the external presentation.",191,Boundary/GetCommentResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/TimeDiffResponseModel.java,TimeDiffResponseModel.java,1.0,"This class is clearly a ""Response Model"" as indicated by its name, package, and implementation of `ResponseModel`. It defines the data structure returned from a boundary, fulfilling the role of a Response Model in the Boundary concept.",409,Boundary/TimeDiffResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/LocationData.java,LocationData.java,0.7,"This class is located within a `boundary` package, suggesting its role in defining an interface. It acts as a data transfer object, likely for communication between layers, which aligns with the concept of a Request or Response Model. However, without context of its usage (e.g., if it's truly used for interactor communication or just a generic data holder), it's not a definitive 1.0.",179,Boundary/LocationData.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetAllTodosRequest.java,GetAllTodosRequest.java,0.9,"This class, `GetAllTodosRequest`, is located within a `boundary` package and extends `TodoRequestModel`. This clearly aligns with the concept of a ""Request Model"" within the Boundary layer, serving as an interface for input to the core business logic. Its emptiness suggests it's a marker or base for future expansion, which is common for simple requests.",97,Boundary/GetAllTodosRequest.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/framework/boundary/SynchronousDeliveryInteractorBoundary.java,SynchronousDeliveryInteractorBoundary.java,1.0,"This interface perfectly embodies the ""Boundary"" concept. It defines a clear contract (`doSync`) for communication between an outer layer (delivery mechanism) and the core business logic (interactor), using generic `RequestModel` and `ResponseModel` types. This aligns directly with the description's intent of separating core application from delivery mechanisms via defined interfaces and models.",586,Boundary/SynchronousDeliveryInteractorBoundary.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/SiteData.java,SiteData.java,0.9,"This class is named `SiteData` and resides in a `boundary` package. It implements `ResponseModel`, indicating its role as a data structure for output from the core logic. This aligns perfectly with the concept's description of a Response Model within the Boundary layer.",359,Boundary/SiteData.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/framework/boundary/ResponseModel.java,ResponseModel.java,0.8,"This code defines a `ResponseModel` interface, which is a key component of the Boundary concept. It serves as a marker interface for response data structures, aligning with the idea of defining interfaces for communication. While it's an empty interface here, its existence and naming clearly indicate its intended role in separating core logic from outer layers. The `DropoverModel` inheritance suggests a broader framework context.",99,Boundary/ResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingDateResponseModel.java,GetSchedulingDateResponseModel.java,1.0,"This class clearly acts as a Response Model, containing data to be returned from a core business logic operation. Its placement within a `boundary` package and its implementation of `ResponseModel` further confirm its role as an interface for communication between layers, aligning perfectly with the ""Boundary"" concept.",318,Boundary/GetSchedulingDateResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/UploadFileResponseModel.java,UploadFileResponseModel.java,1.0,"This class is explicitly named `UploadFileResponseModel` and resides in a `boundary` package. It implements `ResponseModel`, clearly indicating its role as a data structure for communication from the core business logic to an outer layer, aligning perfectly with the concept of a Boundary's Response Model.",186,Boundary/UploadFileResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/TimeDiffRequestModel.java,TimeDiffRequestModel.java,1.0,"This code perfectly embodies the ""Boundary"" concept. It defines a `RequestModel` which is a data structure used to pass input from an outer layer (like a UI) to an Interactor. Its fields (`reference`, `target`, `locale`) are precisely the kind of data an Interactor would need to perform a time difference calculation, without exposing internal business logic.",283,Boundary/TimeDiffRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingResponseModel.java,AddSchedulingResponseModel.java,1.0,"This class is explicitly named `AddSchedulingResponseModel` and resides in a `boundary` package. It implements `ResponseModel`, clearly indicating its role as a data structure for communication from the core business logic to an outer layer, aligning perfectly with the ""Boundary"" concept's description of including Response Models for interface communication.",198,Boundary/AddSchedulingResponseModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingUserRequestModel.java,AddSchedulingUserRequestModel.java,1.0,"This class is explicitly named `AddSchedulingUserRequestModel` and resides in a `boundary` package. It implements `RequestModel`, clearly indicating its role as a data structure for incoming requests, which is a core component of the Boundary concept.",222,Boundary/AddSchedulingUserRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/CommentData.java,CommentData.java,0.9,"This class is named `CommentData` and resides in a `boundary` package. It implements `ResponseModel`, indicating its role as a data structure for communication from the core. This aligns well with the concept of a Boundary defining interfaces for communication, specifically a Response Model.",316,Boundary/CommentData.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/framework/boundary/SiteDependentRequestModel.java,SiteDependentRequestModel.java,0.9,"This class is explicitly named `SiteDependentRequestModel` and implements `RequestModel`, clearly indicating its role as a data structure for incoming requests. Its placement within a `boundary` package further reinforces its intent to define an interface for communication, aligning perfectly with the ""Boundary"" concept's description of including Request Models for communication between layers.",191,Boundary/SiteDependentRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/AddTodoListResponse.java,AddTodoListResponse.java,1.0,"This class perfectly embodies a Response Model within a Boundary. It's a simple data structure intended to carry the result of an operation (adding a todo list) back from the core business logic to the outer layers, aligning with the concept's intent and mechanism.",175,Boundary/AddTodoListResponse.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/CreateSiteRequestModel.java,CreateSiteRequestModel.java,1.0,"This class is explicitly named `CreateSiteRequestModel` and implements `RequestModel`, clearly indicating its role as a data structure for incoming requests. This perfectly aligns with the ""Request Model"" aspect of the Boundary concept, facilitating communication from outer layers to interactors.",179,Boundary/CreateSiteRequestModel.java
technical,Boundary,"Defines the interfaces for communication between the core business logic (Interactors) and the outer layers (e.g., UI, web services). It includes Request and Response Models.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingDateResponseModel.java,AddSchedulingDateResponseModel.java,1.0,"This class is explicitly named `AddSchedulingDateResponseModel` and implements `ResponseModel`, clearly indicating its role as a data structure for the response from a use case, which aligns perfectly with the ""Boundary"" concept's description of including Response Models for communication between interactors and outer layers.",223,Boundary/AddSchedulingDateResponseModel.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/GetTodo.java,GetTodo.java,1.0,"This class perfectly embodies an Interactor. It orchestrates data flow between `GetTodoRequestModel` (Boundary/Input), `TodoGateway` (Boundary/Persistence), and `TodoData` (Boundary/Output). It contains application-specific business logic (validation, retrieving from gateway, building response) and is independent of UI or database specifics.",2149,Interactor/GetTodo.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/GetAllTodoLists.java,GetAllTodoLists.java,0.9,"This class clearly acts as an Interactor. It orchestrates data flow between the `TodoGateway` (a boundary/data access mechanism) and the `TodoList` entity. It encapsulates the business logic for retrieving todo lists, including validation and packaging the response, without direct UI or database concerns.",1498,Interactor/GetAllTodoLists.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/AddTodo.java,AddTodo.java,0.9,"This class clearly acts as an Interactor. It orchestrates the flow of data (request validation, HTML encoding, persistence via a gateway, and response building) for the ""Add Todo"" use case. It takes a request model, interacts with entities (Todo, TodoList) and a gateway (TodoGateway), and produces a response model, aligning perfectly with the Interactor's role of encapsulating application-specific business logic.",2431,Interactor/AddTodo.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/mail/interactor/validation/SendMailValidation.java,SendMailValidation.java,0.1,"This class is named `SendMailValidation` and extends `SiteDependentRequestValidator`. Its primary role appears to be validation, not orchestrating business logic or managing data flow between entities and boundaries, which are core responsibilities of an Interactor. It lacks any methods that would suggest it encapsulates a use case.",381,Interactor/SendMailValidation.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/ChangeComment.java,ChangeComment.java,1.0,"This class perfectly embodies the Interactor concept. It orchestrates data flow (requestModel to gateway, gateway to response builder), contains application-specific business logic (validation, encoding, calling gateway), and is independent of UI or database concerns, interacting only with boundaries (request/response models) and entities/gateways.",2055,Interactor/ChangeComment.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/validation/CommentRequestValidator.java,CommentRequestValidator.java,0.1,"This class is named `CommentRequestValidator` and extends `SiteDependentRequestValidator`. Its sole purpose is validation, not orchestrating data flow or encapsulating core business logic as described for an Interactor. It lacks any methods that would perform such orchestration.",394,Interactor/CommentRequestValidator.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/files/interactor/ReportAbuse.java,ReportAbuse.java,1.0,"This class perfectly embodies the Interactor concept. It implements a boundary interface, takes request models, orchestrates validation and mail sending (business logic), and returns a response model, all without UI or database concerns.",1472,Interactor/ReportAbuse.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/AddSchedulingDate.java,AddSchedulingDate.java,0.9,"This class clearly acts as an Interactor. It orchestrates business logic (validation, HTML encoding, persistence logic including checking for existing dates) by interacting with a Gateway (Boundary) and Request/Response Models (Boundaries). It encapsulates a specific use case (""Add Scheduling Date"") and operates on Entities (Scheduling, SchedulingDate). The name `AddSchedulingDate` and its placement in the `interactor` package further confirm its role.",2790,Interactor/AddSchedulingDate.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/DeleteSchedulingUser.java,DeleteSchedulingUser.java,0.9,"This class clearly acts as an Interactor. It orchestrates data flow (request validation, HTML encoding, gateway interaction) and encapsulates the specific use case of deleting a scheduling user, without directly handling UI or database concerns. It interacts with Boundaries (Request/Response Models) and a Gateway (for persistence).",1903,Interactor/DeleteSchedulingUser.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/mail/interactor/SendMailToCreator.java,SendMailToCreator.java,0.8,"This class clearly acts as an Interactor. It orchestrates data flow between Gateways (CreatorGateway, SiteGateway) and a MailChannel (a boundary/infrastructure concern). It contains application-specific business logic for sending mail, including validation and translation. The `doSync` method encapsulates the core use case. The `invoke` method, however, suggests a dual role as an AOP interceptor, which slightly deviates from a pure Interactor's single responsibility, but its primary function remains that of an Interactor.",4253,Interactor/SendMailToCreator.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/exception/TodoNotFoundException.java,TodoNotFoundException.java,0.0,"This code defines a custom exception. While it resides in an ""interactor"" package, it does not contain any business logic, orchestrate data flow, or encapsulate use cases. It's a utility class for error handling, not an Interactor itself.",404,Interactor/TodoNotFoundException.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/namegeneration/RandomSiteNameGenerator.java,RandomSiteNameGenerator.java,0.6,"This class performs a specific business logic task (generating a random site name) and orchestrates data flow between an internal random number and an encoder. However, it lacks interaction with ""Entities"" or ""Boundaries"" as typically expected for a full Interactor, making it more of a specialized service or helper within a larger Interactor.",617,Interactor/RandomSiteNameGenerator.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/AddSchedulingUser.java,AddSchedulingUser.java,1.0,"This class perfectly embodies the Interactor concept. It orchestrates the flow by taking a request model, validating it, performing business logic (HTML encoding, persistence via a gateway), and returning a response model. It depends on boundaries (request/response models, gateway) and an entity (SchedulingUser), clearly separating concerns from UI or database specifics.",2085,Interactor/AddSchedulingUser.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/VoteOption.java,VoteOption.java,0.0,"This code defines an enum, which is a data type representing a fixed set of constants. It does not contain any application-specific business logic, orchestrate data flow, or encapsulate use cases. It merely defines possible vote options, which would typically be used *by* an interactor, but is not an interactor itself.",101,Interactor/VoteOption.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/CreateTimeDiff.java,CreateTimeDiff.java,0.9,"This class clearly acts as an Interactor. It encapsulates a specific use case (calculating time differences), orchestrates data flow between request/response models (Boundaries), and contains the core business logic for this calculation, independent of UI or persistence.",5705,Interactor/CreateTimeDiff.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/GetTodoList.java,GetTodoList.java,1.0,"This class perfectly embodies the Interactor concept. It orchestrates data flow (request -> gateway -> response), contains application-specific business logic (retrieving and converting TodoList data), and is isolated from UI/database concerns, relying on boundaries and gateways.",2197,Interactor/GetTodoList.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/CommentResponseBuilder.java,CommentResponseBuilder.java,0.4,"This class is named ""CommentResponseBuilder"" and primarily focuses on converting `Comment` entities into `CommentData` boundary objects and building response models. While it performs some ""post-processing"" like calculating time differences, its core role is data transformation for presentation, not orchestrating application-specific business logic or use cases. It acts more like a presenter or data mapper than a true interactor.",2789,Interactor/CommentResponseBuilder.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/SetFinalDate.java,SetFinalDate.java,1.0,"This class perfectly aligns with the Interactor concept. It encapsulates a specific use case (""Set Final Date""), orchestrates data flow by taking a request model and returning a response model, and uses a gateway (boundary) to interact with persistence, keeping business logic separate from UI/DB concerns.",1058,Interactor/SetFinalDate.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/AddScheduling.java,AddScheduling.java,1.0,"This class perfectly embodies the Interactor concept. It orchestrates data flow between the `AddSchedulingRequestModel` (Boundary/Input), `Scheduling` (Entity), and `SchedulingGateway` (Boundary/Persistence). It encapsulates the ""add scheduling"" use case logic, including validation, HTML encoding, persistence, and response building, without UI or database specifics.",2145,Interactor/AddScheduling.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/GetRangedComments.java,GetRangedComments.java,1.0,"This class perfectly embodies an Interactor. It orchestrates data flow by taking a request model, using a gateway to fetch entities (comments), applying validation, and then building a response model. It contains application-specific business logic (fetching ranged comments) and is decoupled from UI/database concerns, fulfilling all aspects of the Interactor definition.",1489,Interactor/GetRangedComments.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/exception/CommentNotFoundException.java,CommentNotFoundException.java,0.1,"This class is an exception, not an Interactor. While it's located within an `interactor` package, its role is to signal an error condition, not to encapsulate application-specific business logic or orchestrate data flow, which are the core responsibilities of an Interactor.",434,Interactor/CommentNotFoundException.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/GetSiteData.java,GetSiteData.java,0.9,"This class clearly acts as an Interactor. It takes an Entity (`Site`), orchestrates data extraction and transformation (using another Interactor `FormatCreatorNicely`), and prepares it for a Boundary (`SiteData`). It encapsulates the business logic of formatting site data for presentation, aligning perfectly with the Interactor's role.",1298,Interactor/GetSiteData.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/ChangeTodo.java,ChangeTodo.java,0.9,"This class clearly acts as an Interactor. It orchestrates data flow (request -> validation -> encoding -> persistence -> retrieval), contains application-specific business logic (validation rules, data transformation like HTML escaping), and uses boundaries (RequestModel, TodoData) and entities (TodoList, TodoGateway) without directly interacting with UI or database specifics. It encapsulates a core use case: changing a todo item.",2618,Interactor/ChangeTodo.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/files/interactor/UploadFile.java,UploadFile.java,0.9,"This class clearly acts as an Interactor. It orchestrates data flow (request model -> gateway -> response model), contains application-specific business logic (file validation, image thumbnailing), and is independent of UI or direct database concerns, relying on gateways for persistence. It implements a `SynchronousDeliveryInteractorBoundary`, explicitly defining its role.",4188,Interactor/UploadFile.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/files/interactor/DownloadFile.java,DownloadFile.java,1.0,"This class perfectly embodies the Interactor concept. It orchestrates data flow by taking a `RequestModel`, using `Gateways` (boundaries to external systems like file storage and site data) to retrieve necessary information, applying business logic (validation, file download), and returning a `ResponseModel`. It is free from UI or database specifics, focusing solely on the application's core use case of downloading a file.",1779,Interactor/DownloadFile.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/namegeneration/AlphabeticBase26Encoder.java,AlphabeticBase26Encoder.java,0.1,"This class is an encoder, specifically for base-26 alphabetic encoding. It defines the character set for encoding. It does not contain application-specific business logic, orchestrate data flow, or represent a use case. It's a utility or infrastructure component, not an Interactor.",513,Interactor/AlphabeticBase26Encoder.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/GetSchedulings.java,GetSchedulings.java,1.0,"This class perfectly embodies the Interactor concept. It orchestrates data flow (RequestModel -> Gateway -> ResponseModel), contains application-specific business logic (reading schedulings, validation, response building), and is isolated from UI/database concerns, relying on boundaries (Request/Response Models) and gateways (SchedulingGateway).",1993,Interactor/GetSchedulings.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/validation/SchedulingRequestValidator.java,SchedulingRequestValidator.java,0.2,"This class is named ""SchedulingRequestValidator"" and its methods are all `doSync` which perform validation. While validation is a part of business logic, this class *only* performs validation and does not orchestrate data flow or encapsulate a full use case. It acts more like a helper or a service for an actual Interactor.",6470,Interactor/SchedulingRequestValidator.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/DeleteTodo.java,DeleteTodo.java,1.0,"This class perfectly embodies the Interactor concept. It orchestrates business logic (validation, deletion) by interacting with a gateway (TodoGateway) and a validator (TodoRequestValidator), processing a request model and returning a response model (though null in this case, which is a design choice, not a concept violation). It's free from UI or database specifics, focusing solely on the ""delete todo"" use case.",1067,Interactor/DeleteTodo.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/GetScheduling.java,GetScheduling.java,1.0,"This class perfectly embodies the Interactor concept. It orchestrates data flow by taking a request model, interacting with a gateway (boundary/data access), applying business logic (validation, data retrieval, exception handling), and producing a response model. It is independent of UI and database specifics, focusing solely on the ""Get Scheduling"" use case.",3462,Interactor/GetScheduling.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/creator/interactor/FormatCreatorNicely.java,FormatCreatorNicely.java,0.8,"This class acts as an Interactor by encapsulating a specific business rule: formatting a Creator's name. It takes an Entity (Creator) as input, applies logic (formatting and validation), and returns a formatted string, orchestrating data flow without UI or database concerns. Its role aligns well with the Interactor's purpose of containing application-specific business logic.",1202,Interactor/FormatCreatorNicely.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/VoteForSchedulingDate.java,VoteForSchedulingDate.java,0.9,"This class clearly acts as an Interactor. It orchestrates data flow (request -> validation -> persistence via gateway), encapsulates application-specific business logic (voting logic), and is independent of UI or database concerns, relying on boundaries and gateways.",1992,Interactor/VoteForSchedulingDate.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/GetSite.java,GetSite.java,0.9,"The `GetSite` class clearly acts as an Interactor. It orchestrates data flow by taking a request model, interacting with a gateway (SiteGateway) to retrieve an entity (Site), and then transforming this data into a response model. It also delegates to other interactors (`FormatCreatorNicely`, `CreateTimeDiff`) for specific business logic, aligning perfectly with the concept's description of encapsulating core use cases and orchestrating data.",3375,Interactor/GetSite.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/GetSchedulingDate.java,GetSchedulingDate.java,0.9,"This class clearly acts as an Interactor. It takes a request model, uses a gateway (boundary) to retrieve an entity, applies business logic (finding the specific date, handling duplicates), and then builds a response model. It orchestrates data flow between boundaries (request/response models) and entities (Scheduling, SchedulingDate) via a gateway, encapsulating a specific use case. The validation step also fits within the interactor's responsibility.",2587,Interactor/GetSchedulingDate.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/files/interactor/ListFiles.java,ListFiles.java,0.9,"This class clearly acts as an Interactor. It orchestrates data flow by taking a request, validating it (using a validator, which could be considered part of the business logic or a helper), interacting with gateways (boundaries/entities) to retrieve data, and then packaging that data into a response model. It encapsulates the ""list files for a site"" use case, free from UI or direct database concerns. The use of `SynchronousDeliveryInteractorBoundary` further reinforces its role as an interactor.",1481,Interactor/ListFiles.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/exception/TodoListNotPersistedException.java,TodoListNotPersistedException.java,0.0,"This code defines a custom exception. While exceptions are part of an application's overall logic, this specific class does not contain or orchestrate business logic itself. It's a data structure for error reporting, not an Interactor.",435,Interactor/TodoListNotPersistedException.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/exception/PostNotInPastException.java,PostNotInPastException.java,0.0,"This code defines a custom exception. While it resides within a package named ""interactor,"" the code itself does not contain any business logic, data orchestration, or use case implementation. It's merely a data structure for an exception, not an interactor.",190,Interactor/PostNotInPastException.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/AddComment.java,AddComment.java,1.0,"This class perfectly embodies the Interactor concept. It implements `SynchronousDeliveryInteractorBoundary`, takes `RequestModel` and returns `ResponseModel`, orchestrates `CommentGateway` and `CreatorGateway` (Entities/Boundaries), and contains the application-specific business logic for adding a comment, including validation and data manipulation. It is clearly decoupled from UI and database specifics.",2907,Interactor/AddComment.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/namegeneration/BaseEncoder.java,BaseEncoder.java,0.1,"This class is named `BaseEncoder` and performs a specific encoding function (base conversion). While it contains logic, it's a utility class for a specific algorithm, not an ""Interactor"" orchestrating data flow between entities or representing a use case. Its role is purely algorithmic, not business process management.",2320,Interactor/BaseEncoder.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/CreateSite.java,CreateSite.java,0.9,"This class clearly acts as an Interactor. It orchestrates data flow between request/response models (Boundaries), interacts with Gateways (Entities/Boundaries) to persist data, and contains application-specific business logic like validation, HTML encoding, and site/creator production. It is independent of UI and database specifics.",4282,Interactor/CreateSite.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/AddTodoList.java,AddTodoList.java,0.9,"This class clearly acts as an Interactor. It orchestrates data flow (request -> validation -> encoding -> persistence -> response), uses a Gateway (TodoGateway) to interact with external systems (implicitly, a database), and contains application-specific business logic (encoding HTML, persisting a TodoList). It adheres to the concept's intent of encapsulating a use case.",1823,Interactor/AddTodoList.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/GetAllTodos.java,GetAllTodos.java,1.0,"This class clearly acts as an Interactor. It orchestrates data flow by taking a request, using a gateway to retrieve entities (TodoList, Todo), applying business logic (validation, data transformation), and returning a response. It encapsulates the ""get all todos"" use case, separating it from UI/database concerns.",2071,Interactor/GetAllTodos.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/DeleteTodoList.java,DeleteTodoList.java,0.9,"This class clearly acts as an Interactor. It orchestrates the deletion of a TodoList by using a validator and a gateway (boundary/entity interaction). It encapsulates the specific business logic for this use case, aligning perfectly with the concept's description. The `doSync` method is the core use case execution.",1085,Interactor/DeleteTodoList.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/validation/TodoRequestValidator.java,TodoRequestValidator.java,0.2,"This class is named ""TodoRequestValidator"" and its primary role is validation, not orchestrating business logic or managing data flow between entities and boundaries. While validation is part of a use case, this specific class is a helper for an interactor, not an interactor itself. It doesn't encapsulate a core use case.",1275,Interactor/TodoRequestValidator.java
technical,Interactor,Contains the application-specific business logic. Interactors orchestrate the flow of data between Entities and Boundaries.,../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/GetComments.java,GetComments.java,1.0,"This class perfectly embodies the Interactor concept. It orchestrates data flow by taking a request model, using a gateway to retrieve entities (comments), applying validation, and then building a response model. It contains application-specific business logic (retrieving comments for a site) and is decoupled from UI/database concerns, fulfilling all aspects of the Interactor's role.",1402,Interactor/GetComments.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/aws/DynamoDbTodoGateway.java,DynamoDbTodoGateway.java,0.0,"This file, `DynamoDbTodoGateway.java`, is a data access layer implementation. It handles persistence operations for `Todo` and `TodoList` objects using AWS DynamoDB. It is responsible for translating domain objects to and from the database representation. The `Entity` concept, as described, refers to the core business objects themselves (e.g., `Todo`, `TodoList`), not the mechanism for persisting them. This file is a ""gateway"" or ""repository,"" which interacts *with* entities, but is not an entity itself.",8135,Entity/DynamoDbTodoGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/SchedulingDate.java,SchedulingDate.java,0.9,"This interface clearly defines a core business object, `SchedulingDate`, representing a fundamental concept in a scheduling domain. It encapsulates attributes (date title, ID) and behaviors (adding users to YES/NO/MAYBE lists) directly related to this concept, independent of persistence or UI concerns. Its role as a high-level domain object is evident.",1262,Entity/SchedulingDate.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/exception/SchedulingNotPersistentException.java,SchedulingNotPersistentException.java,0.0,"This code defines an exception, not an entity. Exceptions are mechanisms for handling errors, not core business objects. An entity would represent a ""Scheduling"" object itself, not an error related to its persistence.",605,Entity/SchedulingNotPersistentException.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/exception/CreatorNotPersistentException.java,CreatorNotPersistentException.java,0.0,"This file defines an exception, not a core business object or entity. Exceptions are part of error handling, not the fundamental domain model.",193,Entity/CreatorNotPersistentException.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/site/entity/Site.java,Site.java,1.0,"The `Site` interface clearly represents a core business object, encapsulating attributes like dates, descriptions, names, and a creator. Its role as a high-level concept in the domain is evident, aligning perfectly with the definition of an Entity.",428,Entity/Site.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/Creator.java,Creator.java,0.9,"This interface defines attributes for a ""Creator,"" which clearly represents a core business object in an application likely dealing with content creation or user profiles. It encapsulates fundamental data about a creator, aligning well with the definition of an Entity as a high-level, independent business concept. The use of an interface suggests it's a contract for such an entity.",228,Entity/Creator.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/inmemory/InMemoryTodoGateway.java,InMemoryTodoGateway.java,0.2,"This class is an `InMemoryTodoGateway`, which is a *gateway* or *repository* implementation. Its role is to manage the persistence of `Todo` and `TodoList` entities, not to *be* the entities themselves. The actual entities (`Todo`, `TodoList`, `PojoTodo`, `PojoTodoList`) are referenced and manipulated by this class, but this class itself does not represent a core business object.",4818,Entity/InMemoryTodoGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/Scheduling.java,Scheduling.java,1.0,"This `Scheduling` interface clearly defines a core business object with attributes like ID, position, title, and associated lists of users and dates. It represents a fundamental concept within the application's domain, independent of persistence or specific application layers, aligning perfectly with the definition of an Entity.",297,Entity/Scheduling.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/inmemory/InMemoryCommentStorage.java,InMemoryCommentStorage.java,0.0,"This file, `InMemoryCommentStorage.java`, is an implementation of a `CommentGateway`. A gateway is typically a data access or persistence layer component, not an entity itself. The `Comment` entity is referenced and manipulated by this class, but this class *is not* the `Comment` entity. It stores and retrieves `PojoComment` objects, which are likely the actual entities or DTOs representing them.",4328,Entity/InMemoryCommentStorage.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/framework/entity/aws/BetweenWrapper.java,BetweenWrapper.java,0.1,"This class appears to be a utility wrapper for handling 'between' range queries, likely for AWS services, given its package. It does not represent a core business object or a high-level concept of the application's domain. Its role is more akin to a data transfer object or a query parameter helper.",548,Entity/BetweenWrapper.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/inmemory/InMemorySchedulingGateway.java,InMemorySchedulingGateway.java,0.8,"This class is an in-memory *gateway* for `Scheduling` entities. While it doesn't *define* the `Scheduling` entity itself, it clearly operates on and manages instances of `Scheduling`, `SchedulingDate`, and `SchedulingUser`, which are the core business objects (entities) in this context. Its methods directly manipulate and retrieve these entities, demonstrating their central role.",4275,Entity/InMemorySchedulingGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/aws/DynamoDbSchedulingGateway.java,DynamoDbSchedulingGateway.java,0.1,"This class, `DynamoDbSchedulingGateway`, is clearly a ""Gateway"" or ""Repository"" implementation. Its primary role is to interact with a data store (DynamoDB) to persist and retrieve `Scheduling` and `SchedulingDate` objects. It does not represent the core business objects themselves; rather, it manages their persistence. The actual ""Entities"" would be `Scheduling`, `SchedulingDate`, `SchedulingUser`, and `Creator`, which are referenced and manipulated by this gateway.",14512,Entity/DynamoDbSchedulingGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/CreatorGateway.java,CreatorGateway.java,0.2,"This interface defines a ""Gateway"" which typically acts as an entry point to a persistence layer or external service. While it deals with `Creator` objects, the interface itself is not the `Creator` entity. It's a repository-like interface for managing `Creator` entities, not the entity itself.",743,Entity/CreatorGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/UploaderInformation.java,UploaderInformation.java,0.8,"This interface defines attributes for ""UploaderInformation,"" which represents a core business concept related to file uploads. It captures essential data (IP, date) directly relevant to the domain, aligning with the idea of an Entity as a high-level business object. The use of an interface suggests it's a contract for such an entity.",399,Entity/UploaderInformation.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/TodoKey.java,TodoKey.java,0.1,"This class represents a composite key for a Todo item, not a core business object (Entity) itself. It's a utility for identifying entities, not an entity with business logic or state. Its role is purely for identification and serialization/deserialization of keys.",1290,Entity/TodoKey.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/inmemory/InMemoryCreatorGateway.java,InMemoryCreatorGateway.java,0.1,"This class is a ""Gateway"" (repository/DAO) for `Creator` entities, not the `Creator` entity itself. It manages persistence and retrieval of `Creator` objects, which are the actual entities. The `Creator` interface/class (not shown here but imported) would be the entity.",2665,Entity/InMemoryCreatorGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/pojo/PojoTodo.java,PojoTodo.java,0.9,"This class `PojoTodo` clearly represents a core business object (""Todo"") with attributes and behaviors (getters/setters) that define its state. It implements the `Todo` interface, further solidifying its role as a domain entity, independent of persistence or presentation concerns.",2055,Entity/PojoTodo.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/pojo/PojoUploaderInfo.java,PojoUploaderInfo.java,0.6,"This class represents ""Uploader Information,"" which is a piece of data related to an upload event. While it holds data, its role as a core business object (Entity) is questionable. It seems more like a Value Object or a DTO, as it primarily encapsulates data without complex behavior or a distinct identity beyond its attributes. The ""Pojo"" prefix also suggests a simple data carrier.",1699,Entity/PojoUploaderInfo.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/pojo/PojoScheduling.java,PojoScheduling.java,0.9,"This class clearly represents a core business object (""Scheduling widget""). It aggregates other related entities (users, dates) and holds fundamental attributes (position, title, identifier) that define a scheduling instance, independent of persistence or UI. It implements the `Scheduling` interface, further solidifying its role as a core domain concept.",4470,Entity/PojoScheduling.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/inmemory/InMemoryFileGateway.java,InMemoryFileGateway.java,0.0,"This class, `InMemoryFileGateway`, is clearly an implementation of a ""Gateway"" or ""Repository"" pattern, providing an interface for file storage and retrieval. It manages files and their metadata, but it does not represent a core business object or entity itself. The entities it interacts with (like `Site`, `UploaderInformation`) are passed in or returned, but `InMemoryFileGateway` is a service/infrastructure component, not a business entity.",4501,Entity/InMemoryFileGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/site/entity/gateway/SiteGateway.java,SiteGateway.java,0.1,"This file defines an interface for a ""SiteGateway,"" which is clearly a persistence or data access layer component. It provides methods for reading and producing `Site` objects. The concept of an ""Entity"" refers to the core business objects themselves (e.g., `Site`, `Creator`, `Location`), not the mechanisms used to persist or retrieve them. Therefore, this file does not implement the Entity concept; it interacts with entities.",1762,Entity/SiteGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/StreamingFileGateway.java,StreamingFileGateway.java,0.1,"This code defines an interface for a ""Gateway,"" which is typically an infrastructure or integration layer component, not a core business entity. It deals with file operations (upload, download, list), which are actions performed *on* entities or by infrastructure, rather than representing a core business object itself. The `StreamingFileGateway` is a service or repository-like interface, not an entity.",715,Entity/StreamingFileGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/framework/entity/aws/AWS.java,AWS.java,0.1,"This class, `AWS`, is clearly a utility or infrastructure component for interacting with Amazon DynamoDB. It handles data persistence operations (CRUD) and low-level AWS API calls. It does not represent a core business object or domain concept; rather, it *operates on* or *manages* data related to business objects, but is not one itself.",15931,Entity/AWS.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/site/entity/Location.java,Location.java,0.9,"The `Location` interface clearly defines attributes (longitude, latitude, description, name) that represent a core business object: a geographical point where an event occurs. This aligns perfectly with the concept of an ""Entity"" as a fundamental, high-level business concept independent of specific application details. The use of an interface suggests it's a contract for this core concept.",761,Entity/Location.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/Todo.java,Todo.java,1.0,"This `Todo` interface clearly represents a core business object. It defines the essential attributes and behaviors of a ""Todo"" item, independent of persistence or presentation details, aligning perfectly with the definition of an Entity.",217,Entity/Todo.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/framework/entity/gateway/exception/PersistenceMechanismNotAvailableException.java,PersistenceMechanismNotAvailableException.java,0.0,"This class is an exception, specifically related to persistence mechanisms. It does not represent a core business object or a high-level concept of the application's domain. It's an infrastructure concern, not a domain entity.",307,Entity/PersistenceMechanismNotAvailableException.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/pojo/PojoTodoList.java,PojoTodoList.java,0.9,"This class clearly represents a core business object, `TodoList`, which aggregates `Todo` items. It holds essential data (id, title, todos) and implements an interface, aligning with the definition of an Entity as a high-level, independent business concept. The ""Pojo"" prefix suggests it's a plain object, further supporting its role as a data-centric entity.",1156,Entity/PojoTodoList.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/DateKey.java,DateKey.java,0.2,"This class appears to be a composite key or identifier generator, not a core business object. It combines `schedulingId` and `count` to form a string key, likely for data storage or retrieval. It doesn't represent a high-level business concept like ""Schedule"" or ""Event."" Its primary role is utility for key generation.",738,Entity/DateKey.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/framework/entity/aws/KeyValue.java,KeyValue.java,0.2,"This `KeyValue` class is a low-level data structure for storing key-value pairs, specifically tailored for DynamoDB's attribute representation. It does not represent a core business object or a high-level concept of the application's domain. Its role is purely infrastructural for data persistence.",765,Entity/KeyValue.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/pojo/PojoCreator.java,PojoCreator.java,0.9,"This class, `PojoCreator`, represents a ""Creator"" in the system, which is a core business object. It holds fundamental attributes like name, email, and site name, which are independent of specific application layers. The `Creator` interface it implements further reinforces its role as a high-level business concept. The ""POJO"" in its name suggests it's a plain old Java object, often used for entities.",2318,Entity/PojoCreator.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/SchedulingKey.java,SchedulingKey.java,0.2,"This class represents a composite key for a ""Scheduling"" entity, not the ""Scheduling"" entity itself. It's an identifier, a value object, or a key component, but not the core business object that ""Scheduling"" would be. It lacks any business logic or state beyond its identifier components.",1109,Entity/SchedulingKey.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/validation/TodoValidation.java,TodoValidation.java,0.0,"This class, `TodoValidation`, is clearly a validation utility. It contains methods for validating various inputs related to `Todo` and `TodoList` entities. It does not represent a core business object itself; rather, it operates *on* or *validates* aspects of those entities. Therefore, it does not implement the ""Entity"" concept.",2803,Entity/TodoValidation.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/SchedulingUser.java,SchedulingUser.java,0.9,"This interface defines a core business object (a user) within the scheduling domain. It represents fundamental user attributes independent of specific application details, aligning well with the concept of an Entity. The use of an interface suggests it's a contract for a core concept.",128,Entity/SchedulingUser.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/s3/S3FileGateway.java,S3FileGateway.java,0.1,"This class, `S3FileGateway`, is clearly an infrastructure component responsible for interacting with Amazon S3. It implements `StreamingFileGateway`, which is an interface for file operations. Its role is to provide a concrete implementation for file storage and retrieval, acting as a gateway to an external service. It does not represent a core business object or a high-level concept of the application's domain. Instead, it's a technical detail of how files are managed.",6305,Entity/S3FileGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/mail/entity/channel/common/MailChannelValidator.java,MailChannelValidator.java,0.1,"This class is a validator, not an entity. It performs validation logic on data, which is a behavior, not a core business object. It does not represent a fundamental business concept itself, but rather operates on them.",843,Entity/MailChannelValidator.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/SchedulingGateway.java,SchedulingGateway.java,0.1,"This interface is named `SchedulingGateway`, which typically implies a data access or persistence layer, not an entity itself. It defines methods for reading, producing, deleting, and manipulating `Scheduling` and related objects. While it interacts with entities, it does not *represent* an entity. The entities (`Scheduling`, `SchedulingDate`, `SchedulingUser`) are referenced, but this file is a gateway, not an entity.",1961,Entity/SchedulingGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/Comment.java,Comment.java,1.0,"This `Comment` interface clearly represents a core business object. It defines the essential attributes and behaviors of a comment within the application's domain, independent of persistence or specific UI concerns. Its role aligns perfectly with the description of an Entity.",298,Entity/Comment.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/aws/CommentSorter.java,CommentSorter.java,0.1,"This class is a `Comparator`, which is a utility for sorting. It operates *on* an `Entity` (`Comment`) but is not an `Entity` itself, nor does it represent a core business object. Its role is to provide a sorting mechanism, not to define a fundamental business concept.",437,Entity/CommentSorter.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/framework/entity/gateway/CreatedAtComparator.java,CreatedAtComparator.java,0.1,"This code defines a `Comparator` for `Comment` objects, which is a utility for ordering. It does not represent a core business object (Entity) itself, nor does it define one. It operates *on* an entity, but is not an entity.",482,Entity/CreatedAtComparator.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/mail/entity/channel/inmemory/InMemoryMailChannel.java,InMemoryMailChannel.java,0.1,"This class `InMemoryMailChannel` is an *implementation* of a `MailChannel`. It represents a specific *mechanism* for sending mail (in-memory simulation), not a core business object or high-level concept like ""Mail"" or ""User"". It's a concrete service/infrastructure component, not an entity.",1468,Entity/InMemoryMailChannel.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/framework/entity/gateway/exception/InvalidPersistentDataException.java,InvalidPersistentDataException.java,0.0,"This class is an exception, not a core business object. It represents an error condition related to data persistence, not a fundamental entity within the application's domain model.",286,Entity/InvalidPersistentDataException.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/site/entity/pojo/PojoSite.java,PojoSite.java,1.0,"PojoSite clearly represents a core business object (""Site"") with attributes like title, name, description, dates, creator, and location. It implements the `Site` interface, indicating its role as a fundamental domain concept, independent of persistence or specific application layers.",1944,Entity/PojoSite.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/TodoGateway.java,TodoGateway.java,0.1,"This file defines a `TodoGateway` interface, which is clearly an abstraction for data access or persistence operations. It deals with `Todo` and `TodoList` objects, which are likely the entities, but the gateway itself is not an entity. It's a service or repository interface.",1264,Entity/TodoGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/aws/DynamoDbCommentGateway.java,DynamoDbCommentGateway.java,0.1,"This file, `DynamoDbCommentGateway.java`, is a gateway implementation. Its role is to interact with a data store (DynamoDB) to persist and retrieve `Comment` objects. It does not *represent* the core business object itself; rather, it *operates on* the core business object. The `Comment` entity would be defined in a separate file, likely `at.dropover.comment.entity.Comment`.",7749,Entity/DynamoDbCommentGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/pojo/PojoComment.java,PojoComment.java,0.9,"This class `PojoComment` implements the `Comment` interface, which likely defines the core attributes and behaviors of a comment. It holds data representing a single comment (content, creator, timestamps, etc.), aligning with the definition of an Entity as a core business object. The `Pojo` suffix suggests it's a Plain Old Java Object, often used for entities.",2581,Entity/PojoComment.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/TodoList.java,TodoList.java,1.0,"This interface clearly defines a core business object, `TodoList`, with attributes (`position`, `title`) and a collection of related entities (`Todo`). It represents a fundamental concept in a To-Do application, independent of persistence or specific application layers.",164,Entity/TodoList.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/framework/entity/gateway/exception/InvalidGatewayConfigurationException.java,InvalidGatewayConfigurationException.java,0.1,"This code defines an exception, not an entity. Exceptions are part of the error handling mechanism, not core business objects. An entity would represent a domain concept like ""User,"" ""Product,"" or ""Order,"" not a type of error.",316,Entity/InvalidGatewayConfigurationException.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/site/entity/exception/SiteNotPersistentException.java,SiteNotPersistentException.java,0.0,"This file defines an exception, `SiteNotPersistentException`. Exceptions are not core business objects; they are mechanisms for handling errors or exceptional conditions. The `PojoSite` it references might be an entity, but the exception itself is not.",668,Entity/SiteNotPersistentException.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/pojo/PojoSchedulingUser.java,PojoSchedulingUser.java,0.9,"This class clearly represents a core business object, `SchedulingUser`, which is a fundamental concept in a scheduling application. It holds essential attributes (id, name) that define a user within the domain, independent of persistence or specific application layers. The ""Pojo"" in the name suggests it's a plain object, further aligning with the idea of a pure domain entity.",480,Entity/PojoSchedulingUser.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/inmemory/FileWithMetadata.java,FileWithMetadata.java,0.2,"This class appears to be a data transfer object (DTO) or a temporary wrapper for file information, rather than a core business entity. Its name `FileWithMetadata` suggests it's an aggregation for a specific purpose (in-memory gateway), not a fundamental domain concept. The `File` object it wraps is a Java I/O concept, not a domain entity itself.",748,Entity/FileWithMetadata.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/LoadSchedulingDate.java,LoadSchedulingDate.java,0.1,"This class is a utility or gateway for *loading* an entity (`SchedulingDate`), not an entity itself. It contains logic to retrieve an entity from a collection, which is a service or repository-like behavior, not a core business object.",738,Entity/LoadSchedulingDate.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/site/entity/gateway/inmemory/InMemorySiteGateway.java,InMemorySiteGateway.java,0.0,"This file is an `InMemorySiteGateway`, which is a data access component, not an Entity. It manages the storage and retrieval of `Site` objects, which are the actual entities. The `Site` and `PojoSite` classes, which are imported, would be the entities, but this file itself is not.",1504,Entity/InMemorySiteGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/aws/DynamoDbCreatorGateway.java,DynamoDbCreatorGateway.java,0.1,"This class, `DynamoDbCreatorGateway`, is clearly a ""Gateway"" or ""Repository"" pattern implementation. Its primary role is to interact with a data store (DynamoDB) to persist and retrieve `Creator` objects. It does not represent the `Creator` entity itself, but rather provides an interface for managing `Creator` entities. The `Creator` entity is likely `at.dropover.creator.entity.Creator` or `at.dropover.creator.entity.pojo.PojoCreator`, which are referenced here.",5121,Entity/DynamoDbCreatorGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/CommentGateway.java,CommentGateway.java,0.0,"This file defines an interface for a ""CommentGateway,"" which is a repository or data access layer. It deals with operations on `Comment` objects, but it is not the `Comment` entity itself. The `Comment` entity is imported, indicating it exists elsewhere. Therefore, this file does not implement the ""Entity"" concept.",2010,Entity/CommentGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/CreatorKey.java,CreatorKey.java,0.1,"This class is a utility for generating string keys, not a representation of a core business object. It lacks state and behavior typical of an entity. Its role is purely functional, not conceptual.",442,Entity/CreatorKey.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/framework/entity/aws/ConditionWrapper.java,ConditionWrapper.java,0.1,"This class, `ConditionWrapper`, represents a utility for wrapping AWS DynamoDB query conditions. It's a technical construct for database interaction, not a core business object or a high-level concept of the application's domain. It lacks any business logic or domain-specific rules.",825,Entity/ConditionWrapper.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/exception/NotSoManyCommentsAvailable.java,NotSoManyCommentsAvailable.java,0.0,"This class is an exception, not a core business object. It represents an error condition related to comments, not the comment itself or any other fundamental business entity. Its role is to signal an issue, not to model a domain concept.",358,Entity/NotSoManyCommentsAvailable.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/mail/entity/channel/MailChannel.java,MailChannel.java,0.1,"This interface defines behavior (sending mail) rather than representing a core business object or data structure. It acts more like a service or a port/adapter, not an entity in the domain model. Entities typically hold state and define identity.",310,Entity/MailChannel.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/site/entity/gateway/aws/DynamoDbSiteGateway.java,DynamoDbSiteGateway.java,0.1,"This class is a `Gateway` (repository/DAO) responsible for persisting and retrieving `Site` entities from DynamoDB. It does not represent the `Site` entity itself, but rather interacts with it. The `Site` entity is likely defined elsewhere (e.g., `at.dropover.site.entity.Site` or `at.dropover.site.entity.pojo.PojoSite`).",6467,Entity/DynamoDbSiteGateway.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/site/entity/pojo/PojoLocation.java,PojoLocation.java,0.9,"This class, `PojoLocation`, implements the `Location` interface, representing a core business object (a geographical location) with attributes like longitude, latitude, name, and description. Its immutability and simple data-holding nature align well with the concept of an Entity as a fundamental, independent business concept. The `pojo` package name also suggests its role as a plain old Java object, often used for entities.",947,Entity/PojoLocation.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/pojo/PojoSchedulingDate.java,PojoSchedulingDate.java,0.9,"This class, `PojoSchedulingDate`, implements the `SchedulingDate` interface, representing a core business object: a specific date for scheduling with associated user responses (yes, no, maybe). It holds data fundamental to the scheduling domain, independent of persistence or UI, aligning well with the definition of an Entity.",1889,Entity/PojoSchedulingDate.java
technical,Entity,Represents the core business objects of the application. These are the most general and high-level concepts.,../../../dropover-at/backend/src/main/java/at/dropover/mail/entity/channel/email/EmailChannel.java,EmailChannel.java,0.1,"This class, `EmailChannel`, is an implementation of a mail sending mechanism. It handles the *how* of sending an email (SMTP configuration, content type, etc.), not the *what* of a core business object. It's a service or infrastructure component, not an entity representing a fundamental business concept like ""Order"" or ""Customer"".",3680,Entity/EmailChannel.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/aws/DynamoDbCommentGateway.java,DynamoDbCommentGateway.java,1.0,"This code clearly implements the Gateway pattern. `DynamoDbCommentGateway` implements `CommentGateway`, abstracting DynamoDB-specific operations (`aws.selectItems`, `aws.executeUpdate`, etc.) behind a common interface. This allows the core application to interact with `Comment` data without knowing the underlying persistence mechanism, fulfilling the pattern's intent of decoupling business logic from data access.",7749,Gateway/DynamoDbCommentGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/inmemory/InMemorySchedulingGateway.java,InMemorySchedulingGateway.java,1.0,"This code perfectly implements the Gateway pattern. It provides an in-memory implementation (`InMemorySchedulingGateway`) of the `SchedulingGateway` interface, abstracting the data persistence details. The core application would interact with `SchedulingGateway` without knowing if it's an in-memory, DynamoDB, or S3 implementation, fulfilling the pattern's goal of decoupling business logic from data access.",4275,Gateway/InMemorySchedulingGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/aws/DynamoDbTodoGateway.java,DynamoDbTodoGateway.java,0.9,"This class `DynamoDbTodoGateway` clearly implements the `TodoGateway` interface, abstracting all DynamoDB-specific operations for `Todo` and `TodoList` entities. It centralizes data access logic for DynamoDB, fulfilling the core purpose of the Gateway pattern by decoupling the application from the specific persistence technology.",8135,Gateway/DynamoDbTodoGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/aws/DynamoDbSchedulingGateway.java,DynamoDbSchedulingGateway.java,0.9,"The `DynamoDbSchedulingGateway` class clearly implements the `SchedulingGateway` interface, abstracting DynamoDB-specific operations. It centralizes data access logic for scheduling entities, fulfilling the core intent of the Gateway pattern by decoupling the application from the persistence mechanism. The presence of `SchedulingGateway` implies other implementations (e.g., in-memory) could exist.",14512,Gateway/DynamoDbSchedulingGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/CreatorGateway.java,CreatorGateway.java,0.9,"This interface clearly defines an abstraction layer for `Creator` entity persistence operations. It hides the underlying data storage mechanism, aligning perfectly with the Gateway pattern's intent to decouple business logic from data access. The methods represent typical CRUD operations, which are characteristic of a Gateway.",743,Gateway/CreatorGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/inmemory/InMemoryCreatorGateway.java,InMemoryCreatorGateway.java,0.9,"This code clearly implements the Gateway pattern. It provides an in-memory implementation of the `CreatorGateway` interface, abstracting the persistence details (in this case, a `HashMap`). The existence of `CreatorGateway` implies other implementations (e.g., for DynamoDB) would follow the same interface, allowing the core application to switch data sources without modification. The `CreatorKey` class further centralizes key generation logic, which is a common concern in data access.",2665,Gateway/InMemoryCreatorGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/SchedulingGateway.java,SchedulingGateway.java,1.0,"This interface perfectly embodies the Gateway pattern. It defines an abstract contract for data persistence operations related to ""Scheduling"" entities, without revealing any underlying storage technology details. This allows for different implementations (e.g., in-memory, DynamoDB) to be swapped in, decoupling the business logic from the data access layer as described.",1961,Gateway/SchedulingGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/s3/S3FileGateway.java,S3FileGateway.java,1.0,"This code perfectly embodies the Gateway pattern. It abstracts S3-specific details (JetS3t library, S3Bucket, S3Object) behind a generic `StreamingFileGateway` interface. This allows the core application to interact with files without knowing they are stored in S3, fulfilling the goal of decoupling business logic from data access and enabling easy switching to other storage implementations.",6305,Gateway/S3FileGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/gateway/inmemory/InMemorySiteGateway.java,InMemorySiteGateway.java,1.0,"This code perfectly implements the Gateway pattern. It provides an in-memory abstraction for `Site` persistence, fulfilling the ""in-memory"" part of the description. It implements the `SiteGateway` interface, demonstrating its role in decoupling the application from specific data storage, as intended by the pattern.",1504,Gateway/InMemorySiteGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/aws/DynamoDbCreatorGateway.java,DynamoDbCreatorGateway.java,0.9,"This code clearly implements the Gateway pattern. `DynamoDbCreatorGateway` acts as a specific implementation of the `CreatorGateway` interface, abstracting DynamoDB persistence details. It provides methods like `load`, `persist`, and `delete` that operate on `Creator` objects, decoupling the application's business logic from the underlying DynamoDB interactions. The existence of `CreatorGateway` implies other implementations (e.g., in-memory) could exist, fulfilling the pattern's goal of interchangeable data sources.",5121,Gateway/DynamoDbCreatorGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/CommentGateway.java,CommentGateway.java,0.9,"This interface clearly defines a contract for interacting with `Comment` entities, abstracting the underlying persistence mechanism. It provides methods for creating, reading, and updating comments, fulfilling the role of a Gateway by decoupling the application logic from data storage details. The ""in-memory and AWS DynamoDB/S3 exist"" part of the description implies concrete implementations would follow this interface.",2010,Gateway/CommentGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/inmemory/InMemoryFileGateway.java,InMemoryFileGateway.java,0.9,"This code clearly implements the Gateway pattern. It provides an in-memory abstraction for file persistence, fulfilling the ""in-memory"" part of the description. It uses an interface (`StreamingFileGateway`) to define the contract, allowing other implementations (like DynamoDB/S3, though not shown here) to be swapped in, thus decoupling the core application from storage details.",4501,Gateway/InMemoryFileGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/gateway/SiteGateway.java,SiteGateway.java,0.9,"This code defines an interface `SiteGateway` which clearly abstracts the persistence operations (`read`, `produceSite`) for `Site` entities. This aligns perfectly with the Gateway pattern's intent to decouple business logic from data access details. The existence of an interface implies that different implementations (e.g., in-memory, DynamoDB) can be provided, fulfilling the core requirement of the pattern.",1762,Gateway/SiteGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/StreamingFileGateway.java,StreamingFileGateway.java,0.9,"This interface clearly defines an abstraction for file storage operations (upload, download, list, get metadata). It uses `InputStream` to handle data, decoupling the *how* of data transfer from the *what* of the file content. This aligns perfectly with the Gateway pattern's intent to abstract persistence details and allow different underlying storage implementations (e.g., in-memory, S3, local disk) without affecting the core application logic.",715,Gateway/StreamingFileGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/gateway/aws/DynamoDbSiteGateway.java,DynamoDbSiteGateway.java,1.0,"This code perfectly embodies the Gateway pattern. `DynamoDbSiteGateway` implements the `SiteGateway` interface, abstracting DynamoDB-specific persistence details from the core application. It handles data conversion between DynamoDB's `AttributeValue` and the application's `Site` and `Location` objects, centralizing data access logic for the `Site` entity. This allows other `SiteGateway` implementations (e.g., in-memory) to be swapped in without affecting business logic.",6467,Gateway/DynamoDbSiteGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/inmemory/InMemoryTodoGateway.java,InMemoryTodoGateway.java,1.0,"This code perfectly embodies the Gateway pattern. It implements the `TodoGateway` interface, providing an in-memory persistence mechanism. This clearly demonstrates the abstraction of data persistence, allowing the core application to interact with `TodoGateway` without knowing the underlying storage (in this case, `MultiValueMap`). This setup facilitates easy switching to other `TodoGateway` implementations (e.g., for DynamoDB) as described in the concept.",4818,Gateway/InMemoryTodoGateway.java
technical,Gateway,"The Gateway pattern is used to abstract data persistence details. Implementations for in-memory and AWS DynamoDB/S3 exist, allowing the core application to remain independent of the specific data storage technology.",../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/TodoGateway.java,TodoGateway.java,0.9,"This interface clearly defines a contract for data access operations related to `Todo` and `TodoList` entities. It abstracts the underlying persistence mechanism, allowing different implementations (e.g., in-memory, DynamoDB) to adhere to this contract without affecting the business logic that uses it. This aligns perfectly with the Gateway pattern's intent to decouple business logic from data storage details.",1264,Gateway/TodoGateway.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/site/delivery/rest/SiteResource.java,SiteResource.java,0.9,"This `SiteResource` class clearly acts as a Delivery layer component. It uses JAX-RS annotations (`@GET`, `@Path`, `@Produces`) to define RESTful endpoints, consumes `HttpHeaders` for locale determination, and adapts the output of the `GetSite` Interactor (`GetSiteResponseModel`) into JSON or XML, fulfilling the role of presenting data to the user in a specific format. It also delegates to other resource classes, indicating a structured delivery layer.",2493,Delivery/SiteResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingDateResource.java,SchedulingDateResource.java,1.0,"This `SchedulingDateResource` class clearly acts as a Delivery layer component. It uses JAX-RS annotations (`@GET`, `@PUT`, `@POST`, `@Produces`, `@FormParam`, `@PathParam`) to define RESTful endpoints. It receives input from HTTP requests, constructs request models for Interactors (e.g., `GetSchedulingDateRequestModel`), invokes the Interactors (`doSync`), and formats the output (e.g., `GetSchedulingDateResponseModel` or `Response.ok().build()`) for the client, specifically JSON. This perfectly aligns with the concept's description of presenting data and adapting Interactor output to a specific format.",2960,Delivery/SchedulingDateResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingUserResource.java,SchedulingUserResource.java,0.9,"This class acts as a REST resource, handling HTTP DELETE requests and producing JSON output. It adapts the request parameters (sitename, schedulingid, userid) into a `DeleteSchedulingUserRequestModel` for the `DeleteSchedulingUser` interactor and then converts the interactor's output into an HTTP `Response`. This clearly aligns with the Delivery layer's responsibility of presenting data in a specific format (JSON for REST).",1652,Delivery/SchedulingUserResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/framework/delivery/rest/jerseyconfiguration/GenericDropoverMessageBody.java,GenericDropoverMessageBody.java,0.9,"This code defines an abstract base class for JAX-RS `MessageBodyWriter` and `MessageBodyReader` implementations. Its purpose is to handle the conversion of `DropoverModel` objects to and from specific formats (like JSON/XML, as hinted by the class comments). This directly aligns with the ""Delivery"" layer's responsibility of adapting data for presentation and handling specific output formats for a RESTful API.",1375,Delivery/GenericDropoverMessageBody.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodoResource.java,TodoResource.java,0.9,"This `TodoResource` class clearly acts as a Delivery layer component. It uses JAX-RS annotations (`@GET`, `@PUT`, `@DELETE`, `@Produces`) to define RESTful endpoints, consumes form parameters, and produces `Response` objects or specific data models (`TodoData`, `DeleteTodoResponseModel`) in JSON/XML format. It interacts with ""Interactors"" (e.g., `getTodo.doSync()`) and adapts their output for the web.",4729,Delivery/TodoResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingDatesResource.java,SchedulingDatesResource.java,0.9,"This class clearly acts as a Delivery layer component. It receives HTTP requests, adapts input to `AddSchedulingDateRequestModel` for the `AddSchedulingDate` interactor, and then formats the interactor's output (`AddSchedulingDateResponseModel`) into an HTTP `Response` with JSON media type. This aligns perfectly with the concept's description of presenting data and adapting output.",1756,Delivery/SchedulingDatesResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodolistResource.java,TodolistResource.java,0.9,"This class acts as a RESTful endpoint, directly exposing methods that interact with ""Interactors"" (GetTodoList, DeleteTodoList) and returning their output models. It handles the ""presentation"" by producing JSON/XML, aligning well with the Delivery layer's responsibility of adapting output for a specific format (REST API). The `TodosResource` sub-resource also indicates a clear separation for different parts of the API.",1979,Delivery/TodolistResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingResource.java,SchedulingResource.java,0.9,"This `SchedulingResource` class clearly acts as a Delivery layer component. It uses JAX-RS annotations (`@GET`, `@Path`, `@Produces`) to define REST endpoints, consumes `RequestModel` objects, and produces `ResponseModel` objects, adapting the output of the `GetScheduling` Interactor to a JSON format. This aligns perfectly with the concept's description of presenting data and adapting output for a specific format (REST/JSON).",1673,Delivery/SchedulingResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodosResource.java,TodosResource.java,0.9,"This `TodosResource` class clearly acts as a Delivery layer component. It receives HTTP requests, adapts them into request models for Interactors (`AddTodo`, `GetAllTodos`), and then formats the Interactor's output (e.g., `GetAllTodosResponse`, `TodoData`) into HTTP responses (JSON/XML, `Response.created`). It handles presentation concerns like media types and URI creation, separating them from the core business logic in the Interactors.",2819,Delivery/TodosResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingUsersResource.java,SchedulingUsersResource.java,0.9,"This code clearly acts as a Delivery layer. It receives HTTP requests (POST), adapts the input (FormParam) into a request model for an Interactor, invokes the Interactor, and then formats the Interactor's output (ResponseModel) into an HTTP Response with JSON (Produces, Response.created, entity). This perfectly aligns with the concept's description of presenting data and adapting output.",1718,Delivery/SchedulingUsersResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingsResource.java,SchedulingsResource.java,0.9,"This `SchedulingsResource` class clearly acts as a Delivery layer component. It receives HTTP requests (GET, POST), adapts input parameters (e.g., `@FormParam`, `@PathParam`) into request models for Interactors (`AddSchedulingRequestModel`, `GetSchedulingsRequestModel`), invokes those Interactors, and then formats their output (`AddSchedulingResponseModel`, `GetSchedulingsResponseModel`) into a specific representation (JSON) for the client, including setting HTTP response codes and headers. This perfectly aligns with the concept's description.",2298,Delivery/SchedulingsResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/framework/delivery/rest/jerseyconfiguration/InteractorException2Status.java,InteractorException2Status.java,0.9,"This code clearly operates within the Delivery layer. It takes exceptions, which are likely thrown by Interactors (business logic), and adapts them into a specific format (HTTP status codes and responses) suitable for a RESTful API. This directly aligns with the concept's description of adapting output for presentation.",1927,Delivery/InteractorException2Status.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/framework/delivery/rest/jerseyconfiguration/XMLMessageBody.java,XMLMessageBody.java,1.0,"This code is a JAX-RS `MessageBodyReader` and `MessageBodyWriter` specifically for XML. Its role is to convert Java objects (`DropoverModel`) to and from XML, which is precisely the function of adapting data for presentation in a specific format (XML for a RESTful API). It directly handles the ""output of the Interactors to a specific format.""",3307,Delivery/XMLMessageBody.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/comment/delivery/rest/CommentsResource.java,CommentsResource.java,0.9,"This `CommentsResource` class clearly acts as a Delivery layer component. It uses JAX-RS annotations (`@GET`, `@POST`, `@Path`, `@Produces`) to define RESTful endpoints, consumes input (form parameters, path parameters, headers), and produces output in specified formats (XML, JSON). It interacts with ""interactors"" (`AddComment`, `GetComments`) from the `boundary` package, demonstrating the separation of presentation from business logic. The `LocaleDeterminator` also shows adaptation of input for the interactors.",2796,Delivery/CommentsResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodolistsResource.java,TodolistsResource.java,0.9,"This class clearly acts as a Delivery layer. It uses JAX-RS annotations to define REST endpoints, consumes form parameters, and produces JSON/XML responses. It interacts with ""Interactor"" classes (GetAllTodoLists, AddTodoList) and adapts their output (GetAllTodoListsResponse, AddTodoListResponse) into HTTP responses, fulfilling the role of presenting data to the user in a specific format.",2347,Delivery/TodolistsResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/comment/delivery/rest/CommentResource.java,CommentResource.java,0.9,"This `CommentResource` clearly acts as a Delivery layer component. It receives HTTP requests (`@PUT`, `@FormParam`), adapts input to `RequestModel`s for Interactors (`AddComment`, `ChangeComment`), and formats the `ResponseModel` from Interactors into an HTTP `Response` (JSON/XML via `@Produces`). It handles presentation concerns like status codes (200 OK, 201 Created) and content negotiation.",2974,Delivery/CommentResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/files/delivery/rest/FilesResource.java,FilesResource.java,0.9,"This `FilesResource` class clearly acts as a Delivery layer component. It uses JAX-RS annotations (`@GET`, `@POST`, `@PUT`, `@Path`, `@Produces`, `@Consumes`) to define RESTful endpoints, adapting the output of `Interactor` classes (e.g., `ListFiles`, `DownloadFile`, `UploadFile`, `ReportAbuse`) into HTTP responses (JSON, XML, file streams, status codes). It handles request parsing (e.g., `@PathParam`, `@FormDataParam`, `HttpServletRequest`) and constructs appropriate `Response` objects, fulfilling the role of presenting data to the user in a specific format.",6452,Delivery/FilesResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/site/delivery/rest/SitesResource.java,SitesResource.java,0.9,"This `SitesResource` class clearly acts as a Delivery layer component. It uses JAX-RS annotations (`@Path`, `@POST`, `@Produces`, `@FormParam`) to define RESTful endpoints, consume specific input formats (form parameters), and produce output in JSON or XML. It interacts with an `Interactor` (`CreateSite`) to perform business logic and then adapts the `CreateSiteResponseModel` into an HTTP `Response`, including setting the `Location` header and the response entity. This perfectly aligns with the concept's description of presenting data and adapting interactor output.",4072,Delivery/SitesResource.java
technical,Delivery,"The Delivery layer is responsible for presenting the data to the user. It adapts the output of the Interactors to a specific format, such as JSON or XML for a RESTful API.",../../../dropover-at/backend/src/main/java/at/dropover/framework/delivery/rest/jerseyconfiguration/JsonMessageBody.java,JsonMessageBody.java,1.0,"This code perfectly aligns with the Delivery layer concept. It's a JAX-RS `MessageBodyReader` and `MessageBodyWriter` specifically for JSON, using Jackson to serialize/deserialize `DropoverModel` objects. This directly handles the ""adapts the output of the Interactors to a specific format (JSON)"" and ""presents the data to the user"" aspects of the Delivery layer.",2071,Delivery/JsonMessageBody.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/site/delivery/rest/SiteResource.java,SiteResource.java,0.9,"The code clearly uses JAX-RS annotations (`@GET`, `@Path`, `@Produces`) to define RESTful resources and their methods. It handles HTTP requests and produces JSON/XML responses, aligning well with the description of a RESTful API. The use of sub-resources (`@Path(""comments"")`, etc.) further demonstrates REST principles. The only minor deviation from a perfect 1.0 is the constructor injection, which is a common pattern but not strictly part of the JAX-RS specification itself.",2493,RESTful API/SiteResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/comment/delivery/rest/CommentsResource.java,CommentsResource.java,0.9,"The code clearly uses JAX-RS annotations (`@Path`, `@GET`, `@POST`, `@Produces`, `@FormParam`, `@PathParam`) to define RESTful resources and methods. It handles HTTP requests, produces JSON/XML responses, and uses standard HTTP status codes (e.g., `Response.created`). The resource hierarchy is also evident with `CommentsResource` and `CommentResource`.",2796,RESTful API/CommentsResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingDatesResource.java,SchedulingDatesResource.java,0.9,"The code uses JAX-RS annotations (`@Path`, `@POST`, `@Produces`, `@FormParam`, `@PathParam`) to define a RESTful resource. It handles HTTP POST requests, produces JSON, and uses URIs for resource identification, aligning well with REST principles. The `Response.created` method also indicates proper RESTful response handling.",1756,RESTful API/SchedulingDatesResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingsResource.java,SchedulingsResource.java,0.9,"The code clearly uses JAX-RS annotations (`@Path`, `@GET`, `@POST`, `@Produces`, `@FormParam`, `@PathParam`) to define RESTful resources and methods. It handles HTTP requests, produces JSON responses, and uses standard HTTP status codes (e.g., `Response.created`). This aligns well with the description of a RESTful API. The use of `@FormParam` for POST is a slight deviation from pure REST (preferring JSON bodies), but it's still a common and accepted practice in many RESTful implementations.",2298,RESTful API/SchedulingsResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodolistResource.java,TodolistResource.java,0.8,"The code uses JAX-RS annotations (@GET, @DELETE, @Path, @Produces) to define RESTful endpoints for a ""Todolist"" resource, handling HTTP methods and producing JSON/XML. This aligns well with the concept's intent and mechanism. However, the `TodolistResource` itself is instantiated with path parameters (`siteName`, `listid`) in its constructor, which is not typical for JAX-RS root resources. Usually, path parameters are extracted from `@Path` annotations on methods. This suggests a slightly unconventional JAX-RS setup, but the core RESTful principles are still present.",1979,RESTful API/TodolistResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingResource.java,SchedulingResource.java,0.8,"The code uses JAX-RS annotations (`@GET`, `@Path`, `@Produces`, `MediaType.APPLICATION_JSON`) to define RESTful resources and methods, handling HTTP GET requests and producing JSON. This aligns well with the concept's description of exposing functionality via a RESTful API. The use of sub-resources (`users`, `dates`) further demonstrates REST principles. However, the class itself is not annotated with `@Path`, which is typically how a root resource is defined in JAX-RS, suggesting it might be a sub-resource or dynamically registered.",1673,RESTful API/SchedulingResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodolistsResource.java,TodolistsResource.java,0.9,"The code clearly uses JAX-RS annotations (`@GET`, `@POST`, `@Path`, `@Produces`, `@FormParam`, `@PathParam`) to define RESTful resources. It handles HTTP methods, produces JSON/XML, and uses URIs for resource identification (e.g., `Response.created`). The `TodolistsResource` acts as a collection, and `getTodoList` correctly delegates to a sub-resource, aligning with REST principles.",2347,RESTful API/TodolistsResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/comment/delivery/rest/CommentResource.java,CommentResource.java,0.6,"The code uses JAX-RS annotations (@PUT, @Produces, @FormParam, @Context, Response) to expose functionality via HTTP, producing JSON/XML. This aligns with the RESTful API concept. However, the use of `@PUT` for both creation and update, determined by an exception, deviates from standard REST practices where `POST` is typically for creation and `PUT` for full updates to a known resource. The URI for creation is also relative, which is not ideal.",2974,RESTful API/CommentResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/files/delivery/rest/FilesResource.java,FilesResource.java,0.9,"The code clearly uses JAX-RS annotations (@Path, @GET, @POST, @PUT, @Produces, @Consumes) to define RESTful resources and their methods. It handles different HTTP verbs, uses path parameters, and produces/consumes JSON/XML (though only XML is explicitly shown for `ListFilesResponseModel` and `MediaType.APPLICATION_JSON` is also listed). It also returns appropriate HTTP responses (e.g., 200 OK, 201 Created). The use of `HttpServletRequest` directly for IP address extraction is a slight deviation from pure REST principles but doesn't negate the overall RESTful implementation.",6452,RESTful API/FilesResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodosResource.java,TodosResource.java,0.9,"The code clearly uses JAX-RS annotations (`@GET`, `@POST`, `@Path`, `@Produces`, `@FormParam`, `@PathParam`, `@Context`) to define RESTful resources and methods. It handles HTTP requests, produces JSON/XML responses, and uses standard HTTP status codes (e.g., `Response.created`). This aligns well with the description of a RESTful API. The only minor deviation is the lack of `@Path` on the class itself, which is typically present for root resources, but it's implied by how it's likely integrated into the JAX-RS application.",2819,RESTful API/TodosResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingDateResource.java,SchedulingDateResource.java,0.8,"The code uses JAX-RS annotations (@GET, @PUT, @POST, @Produces, @FormParam, @PathParam) to define RESTful endpoints. It handles HTTP methods, produces JSON, and maps request parameters, aligning well with the concept of a RESTful API. The use of sub-resources (implied by the constructor parameters) is also a common REST pattern.",2960,RESTful API/SchedulingDateResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingUserResource.java,SchedulingUserResource.java,0.7,"The code uses JAX-RS annotations (`@DELETE`, `@Produces`, `MediaType.APPLICATION_JSON`, `Response`) to define a RESTful endpoint for deleting a resource. It handles HTTP requests and produces JSON responses, aligning with the core tenets of a RESTful API. However, it's a sub-resource, and the full RESTful path definition is missing from this snippet, which slightly reduces the confidence.",1652,RESTful API/SchedulingUserResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingUsersResource.java,SchedulingUsersResource.java,0.8,"The code uses JAX-RS annotations (`@POST`, `@Path`, `@Produces`, `MediaType.APPLICATION_JSON`) to define a RESTful resource. It handles HTTP POST requests, produces JSON, and uses `Response.created` for resource creation, aligning with REST principles. The use of `@FormParam` for input is less common for RESTful APIs which typically prefer JSON bodies for POST requests, but it doesn't fundamentally break the RESTful paradigm. The nested resource `SchedulingUserResource` also indicates a hierarchical resource structure.",1718,RESTful API/SchedulingUsersResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/site/delivery/rest/SitesResource.java,SitesResource.java,0.9,"The code clearly uses JAX-RS annotations (`@Path`, `@POST`, `@Produces`, `@FormParam`, `@PathParam`) to define RESTful resources and endpoints. It handles HTTP requests, produces JSON/XML responses, and uses URIs for resource identification, aligning well with the described concept. The use of `@FormParam` for complex data is a slight deviation from typical REST body payloads but doesn't negate the overall RESTful nature.",4072,RESTful API/SitesResource.java
technical,RESTful API,The application exposes its functionality through a RESTful API using JAX-RS. Resources are defined to handle HTTP requests and produce JSON/XML responses.,../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodoResource.java,TodoResource.java,0.8,"The code uses JAX-RS annotations (@GET, @DELETE, @PUT, @Produces, @FormParam, @Context) to define RESTful endpoints, handle HTTP methods, and specify media types (JSON/XML). It maps operations to resources (TodoResource) and returns appropriate HTTP responses (e.g., 200 OK, 201 Created). The use of URIs for resource identification (Response.created) further aligns with REST principles. However, the resource path itself is not defined in this file, which is crucial for a complete RESTful API.",4729,RESTful API/TodoResource.java
technical,Dependency Injection,Google Guice is used for dependency injection to manage object creation and wiring. This is evident from the use of `@Inject` annotations and Guice modules.,../../../dropover-at/backend/src/main/java/at/dropover/framework/dependencyinjection/GuiceConfig.java,GuiceConfig.java,1.0,"The code explicitly uses `com.google.inject.Guice` to create an `Injector` and extends `GuiceServletContextListener`. It defines a `JerseyServletModule` where `bind` methods are used to configure dependencies, including `ConfigurationFile`, gateways, and interceptors. This clearly demonstrates the use of Google Guice for dependency injection.",5293,Dependency Injection/GuiceConfig.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodosRequestModel.java,GetTodosRequestModel.java,0.8,"The class `GetTodosRequestModel` is clearly intended as a Request Model for a ""Get Todos"" operation. Its inheritance from `SiteDependentRequestModel` suggests it carries input data, aligning with the DTO nature of a Request Model. While it's currently empty, its name and inheritance strongly indicate its role as an input contract.",175,Request Model/GetTodosRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/DeleteSchedulingUserRequestModel.java,DeleteSchedulingUserRequestModel.java,1.0,"The `DeleteSchedulingUserRequestModel` class clearly serves as a data transfer object, holding input parameters (`siteName`, `schedulingId`, `name`) for a specific operation. Its implementation of the `RequestModel` interface further solidifies its role as a defined input contract, aligning perfectly with the concept's description and rationale.",253,Request Model/DeleteSchedulingUserRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/ChangeCommentRequestModel.java,ChangeCommentRequestModel.java,1.0,"This class clearly serves as a data transfer object for input to a use case or API endpoint related to changing a comment. It holds the necessary data (newContent, commentId) and extends a base request model, aligning perfectly with the definition of a Request Model.",240,Request Model/ChangeCommentRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentsRequestModel.java,GetCommentsRequestModel.java,0.8,"The class `GetCommentsRequestModel` is clearly named as a ""Request Model"" and extends `SiteDependentRequestModel`, implying it's a DTO for input. While it's currently empty, its name and inheritance strongly suggest its role as an input contract for a ""Get Comments"" use case, aligning with the concept's intent.",181,Request Model/GetCommentsRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingDateRequestModel.java,GetSchedulingDateRequestModel.java,1.0,"This class perfectly aligns with the Request Model concept. It's a simple DTO, explicitly named `RequestModel` (via interface implementation), designed to carry input data (`dateId`, `schedulingId`) for a specific operation (`GetSchedulingDate`). It serves as a clear contract for the required input.",223,Request Model/GetSchedulingDateRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodoRequestModel.java,GetTodoRequestModel.java,1.0,"This class clearly acts as a Request Model. It's a DTO (`position` field) intended to carry input data for a ""Get Todo"" operation, extending a base `TodoRequestModel`, aligning perfectly with the concept's intent and role.",123,Request Model/GetTodoRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/ReportAbuseRequestModel.java,ReportAbuseRequestModel.java,1.0,"This class perfectly aligns with the ""Request Model"" concept. It's a simple DTO containing fields (`fileName`, `comment`, `reporter`) that represent the input data required for a ""Report Abuse"" use case or API endpoint. It extends `SiteDependentRequestModel`, further indicating its role as an input contract.",298,Request Model/ReportAbuseRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingDateRequestModel.java,AddSchedulingDateRequestModel.java,1.0,"The `AddSchedulingDateRequestModel` is a simple POJO with public fields, clearly intended to carry input data for a scheduling operation. It implements a `RequestModel` interface, explicitly marking its role as a data transfer object for a request, aligning perfectly with the definition of a Request Model.",227,Request Model/AddSchedulingDateRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodoListRequestModel.java,GetTodoListRequestModel.java,0.9,"This class, `GetTodoListRequestModel`, is clearly named to represent a request for a todo list. Its inheritance from `TodoRequestModel` further suggests its role as a specific type of request model, aligning perfectly with the concept of a DTO for input to a use case or API endpoint.",103,Request Model/GetTodoListRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentRequestModel.java,GetCommentRequestModel.java,1.0,"This class clearly serves as a Request Model. It's a DTO (`position` field) intended to carry input data for a specific operation (implied by `GetCommentRequestModel` name), extending a base `SiteDependentRequestModel` which further solidifies its role as an input contract.",206,Request Model/GetCommentRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/AddCommentRequestModel.java,AddCommentRequestModel.java,1.0,"This class clearly serves as a data transfer object for input to a use case (adding a comment). It holds the necessary data (`text`, `creatorName`) and extends a `SiteDependentRequestModel`, indicating its role in a request. This perfectly aligns with the definition of a Request Model.",289,Request Model/AddCommentRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetRangedCommentsRequestModel.java,GetRangedCommentsRequestModel.java,1.0,"This class clearly serves as a data transfer object for input to a use case or API endpoint. It encapsulates the necessary parameters (numberOfComments, offset) for retrieving ranged comments, aligning perfectly with the definition of a Request Model. Its inheritance from SiteDependentRequestModel further suggests its role in a larger request handling framework.",245,Request Model/GetRangedCommentsRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingsRequestModel.java,GetSchedulingsRequestModel.java,0.9,"This class is named `GetSchedulingsRequestModel` and extends `SiteDependentRequestModel`, clearly indicating its role as a data transfer object for a request. Its name directly aligns with the concept of a ""Request Model"" as an input for a use case or API endpoint. The empty body suggests it might inherit all necessary fields from its superclass or represent a request with no specific additional parameters beyond what the superclass provides.",187,Request Model/GetSchedulingsRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/AddTodoRequestModel.java,AddTodoRequestModel.java,1.0,"This class perfectly aligns with the ""Request Model"" concept. It's a DTO (`public` fields, no methods) representing the input for an ""Add Todo"" operation, providing a clear contract for the required data. Its role is to transfer data for a specific use case.",239,Request Model/AddTodoRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/DeleteTodoListRequestModel.java,DeleteTodoListRequestModel.java,0.8,"This class is named `DeleteTodoListRequestModel` and extends `TodoRequestModel`, strongly suggesting its role as a DTO for input to a ""delete todo list"" operation. While empty, its name and inheritance clearly align with the concept of a Request Model. Its emptiness implies that the parent class or the absence of specific parameters for deletion is the design choice.",105,Request Model/DeleteTodoListRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/TodoRequestModel.java,TodoRequestModel.java,0.9,"The `TodoRequestModel` acts as a DTO for input, extending `SiteDependentRequestModel` to likely include site-specific context. It holds `todoListId`, which is clearly an input parameter for a use case or API. This aligns well with the concept of a Request Model providing a stable contract for input data. The public field is a design choice, but doesn't negate its role as a DTO.",203,Request Model/TodoRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/GetSiteRequestModel.java,GetSiteRequestModel.java,1.0,"The `GetSiteRequestModel` clearly acts as a DTO for input data (`siteName`, `locale`) to a use case, implementing the `RequestModel` interface. This perfectly aligns with the definition of a Request Model.",417,Request Model/GetSiteRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/ChangeTodoRequestModel.java,ChangeTodoRequestModel.java,1.0,"This class clearly serves as a data transfer object for input to an operation that changes a Todo. It extends `TodoRequestModel`, suggesting a base for common Todo properties, and adds specific fields for modification, aligning perfectly with the ""Request Model"" concept.",275,Request Model/ChangeTodoRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingRequestModel.java,AddSchedulingRequestModel.java,1.0,"The `AddSchedulingRequestModel` class perfectly aligns with the definition of a Request Model. It's a simple DTO containing input data (`siteName`, `locale`, `title`) intended for a specific operation (adding scheduling), and it implements the `RequestModel` marker interface, explicitly signaling its role.",269,Request Model/AddSchedulingRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/UploadFileRequestModel.java,UploadFileRequestModel.java,1.0,"This class perfectly aligns with the ""Request Model"" concept. It's a simple DTO containing input data (content, length, name, uploader) required for a specific operation (uploading a file), serving as a clear contract for an API endpoint or use case. Its role is precisely to represent the input for a use case.",352,Request Model/UploadFileRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/VoteForSchedulingDateRequestModel.java,VoteForSchedulingDateRequestModel.java,1.0,"This class perfectly aligns with the definition of a Request Model. It's a DTO (`public` fields, no methods) representing input for a use case (voting for a scheduling date), providing a clear contract for the required data. Its name and structure directly reflect its role as an input model.",366,Request Model/VoteForSchedulingDateRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/DownloadFileRequestModel.java,DownloadFileRequestModel.java,1.0,"This class clearly serves as a Request Model. It's a DTO intended to carry input data (`fileName`) for a specific operation (downloading a file), aligning perfectly with the concept's definition and rationale. Its inheritance from `SiteDependentRequestModel` further reinforces its role as a structured input.",208,Request Model/DownloadFileRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/framework/boundary/RequestModel.java,RequestModel.java,0.8,"The `RequestModel` interface, by extending `DropoverModel` and being designated as the input for Interactors, clearly aligns with the concept of a Request Model DTO. Its role is to define the contract for data entering a use case, fulfilling the core intent. The empty interface suggests it's a marker or base for concrete request models.",237,Request Model/RequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingRequestModel.java,GetSchedulingRequestModel.java,1.0,"This class clearly acts as a data transfer object for input. It extends a `SiteDependentRequestModel`, implying it's part of a request, and contains fields (`schedulingIdentifier`, `position`) that represent the data needed for a scheduling operation. This perfectly aligns with the definition of a Request Model.",256,Request Model/GetSchedulingRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/SetFinalDateRequestModel.java,SetFinalDateRequestModel.java,1.0,"This class perfectly aligns with the ""Request Model"" concept. It's a simple DTO containing data (`isFinal`, `schedulingId`, `schedulingDateId`) intended as input for a specific operation (setting a final date), and it implements a `RequestModel` interface, explicitly marking its role.",257,Request Model/SetFinalDateRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/mail/boundary/SendMailToCreatorRequestModel.java,SendMailToCreatorRequestModel.java,1.0,"This class explicitly implements `RequestModel` and contains fields representing input data for a mail sending operation. It perfectly aligns with the definition of a DTO for an API/use case input, providing a clear contract for the required data.",464,Request Model/SendMailToCreatorRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/TimeDiffRequestModel.java,TimeDiffRequestModel.java,1.0,"This class perfectly aligns with the ""Request Model"" concept. It's a simple DTO containing input data (reference, target dates, locale) for a specific operation, implementing a `RequestModel` interface, thus clearly defining the contract for an incoming request.",283,Request Model/TimeDiffRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingUserRequestModel.java,AddSchedulingUserRequestModel.java,1.0,"This class perfectly embodies a Request Model. It's a simple DTO holding input data (`schedulingId`, `name`) for a specific operation (adding a scheduling user), and it explicitly implements a `RequestModel` interface, reinforcing its role as an input contract.",222,Request Model/AddSchedulingUserRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/framework/boundary/SiteDependentRequestModel.java,SiteDependentRequestModel.java,1.0,"This class is explicitly named `SiteDependentRequestModel` and implements `RequestModel`, clearly indicating its role as a data transfer object for input. It holds data (`siteName`, `locale`) relevant to a request, aligning perfectly with the definition of a Request Model.",191,Request Model/SiteDependentRequestModel.java
technical,Request Model,A data transfer object (DTO) that represents the input for a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/CreateSiteRequestModel.java,CreateSiteRequestModel.java,1.0,"The `CreateSiteRequestModel` clearly acts as a DTO for input data. It implements `RequestModel`, explicitly signaling its role as a request model. It holds `SiteData`, representing the necessary input for a ""create site"" operation, aligning perfectly with the concept's intent and mechanism.",179,Request Model/CreateSiteRequestModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingUserResponseModel.java,AddSchedulingUserResponseModel.java,1.0,"This class perfectly embodies a Response Model. It's a simple DTO, implementing a `ResponseModel` interface, designed to carry the output (`userId`) of a use case or API endpoint, thus providing a clear contract and decoupling.",195,Response Model/AddSchedulingUserResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodosResponseModel.java,GetTodosResponseModel.java,1.0,"The `GetTodosResponseModel` is a DTO specifically designed to hold the output data (`List<TodoData>`) for a ""Get Todos"" use case. It implements a `ResponseModel` interface, clearly indicating its role as a response object, thus fulfilling the definition of a Response Model.",214,Response Model/GetTodosResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/mail/boundary/SendMailToCreatorResponseModel.java,SendMailToCreatorResponseModel.java,0.8,"The class `SendMailToCreatorResponseModel` is explicitly named as a ""ResponseModel"" and implements an interface also named `ResponseModel`. This strongly suggests its intent is to serve as a DTO for an API or use case output, aligning with the concept's description. The lack of fields is not an issue for the concept itself, as a response might sometimes convey only success/failure without specific data.",164,Response Model/SendMailToCreatorResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentsResponseModel.java,GetCommentsResponseModel.java,1.0,"This code perfectly implements the Response Model concept. It's a DTO (`GetCommentsResponseModel`) specifically designed to represent the output of an operation (getting comments), containing the necessary data (`List<CommentData> comments`). It also implements a `ResponseModel` interface, further solidifying its role as a contract for the returned data.",223,Response Model/GetCommentsResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodoListResponseModel.java,GetTodoListResponseModel.java,1.0,"This class perfectly aligns with the ""Response Model"" concept. It's a simple DTO (`id`, `title`, `todos`) intended to represent the output of a use case (getting a todo list). Its name `GetTodoListResponseModel` clearly indicates its role as a response, and it implements `ResponseModel`, further solidifying its intent as a contract for data returned.",259,Response Model/GetTodoListResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/VoteForSchedulingDateResponseModel.java,VoteForSchedulingDateResponseModel.java,0.5,"The class `VoteForSchedulingDateResponseModel` is named as a Response Model and implements a `ResponseModel` interface, aligning with the concept's intent. However, it is an empty class, meaning it currently provides no data contract, which is the primary purpose of a DTO/Response Model. It's a placeholder, not a fully implemented DTO.",174,Response Model/VoteForSchedulingDateResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/GetSiteResponseModel.java,GetSiteResponseModel.java,1.0,"This class is explicitly named `GetSiteResponseModel` and implements a `ResponseModel` interface, clearly indicating its role as a DTO for an API endpoint or use case output. It aggregates data (`SiteData`, `TimeDiffResponseModel`, `Date`) intended to be returned.",331,Response Model/GetSiteResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/DownloadFileResponseModel.java,DownloadFileResponseModel.java,1.0,"The `DownloadFileResponseModel` is a simple POJO containing data (`InputStream content`, `String originalFilename`) and implements the `ResponseModel` interface. This perfectly aligns with the definition of a Response Model as a DTO representing the output of a use case, providing a clear contract for returned data.",257,Response Model/DownloadFileResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/CreateSiteResponseModel.java,CreateSiteResponseModel.java,1.0,"The `CreateSiteResponseModel` is a simple POJO that holds data (`SiteData` and `creationTime`) intended to be returned as the output of an operation. It implements a `ResponseModel` interface, explicitly aligning with the concept of a DTO for an API or use case response.",253,Response Model/CreateSiteResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/ListFilesResponseModel.java,ListFilesResponseModel.java,1.0,"This class `ListFilesResponseModel` is a simple data holder for `availableFiles`, intended to be returned as the output of an operation. It implements `ResponseModel`, explicitly marking its role as a response DTO, aligning perfectly with the concept's definition and rationale.",220,Response Model/ListFilesResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/DeleteTodoListResponseModel.java,DeleteTodoListResponseModel.java,0.8,"The code defines a class named `DeleteTodoListResponseModel` which implements a `ResponseModel` interface. This clearly indicates its intent as a DTO for an API endpoint's output, aligning with the concept's description. However, it's an empty class, which is unusual for a response model, but not strictly against the definition of a DTO.",161,Response Model/DeleteTodoListResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingsResponseModel.java,GetSchedulingsResponseModel.java,1.0,"The `GetSchedulingsResponseModel` class is a simple data holder, implementing a `ResponseModel` interface. It clearly serves as a DTO for the output of a use case, aligning perfectly with the definition of a Response Model.",277,Response Model/GetSchedulingsResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/DeleteSchedulingUserResponseModel.java,DeleteSchedulingUserResponseModel.java,0.8,"The class `DeleteSchedulingUserResponseModel` is clearly intended as a Response Model, as indicated by its name and its implementation of the `ResponseModel` interface. While it's currently empty, its role as a DTO for an API endpoint's output is evident from its context within a `boundary` package and its name. The lack of fields is not a detractor for the concept itself, as an empty response is a valid response.",173,Response Model/DeleteSchedulingUserResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/DeleteTodoResponseModel.java,DeleteTodoResponseModel.java,1.0,"This class is explicitly named `DeleteTodoResponseModel` and implements a `ResponseModel` interface, directly aligning with the definition of a DTO representing the output of a use case. Its empty body is appropriate for a successful deletion response where no specific data needs to be returned beyond the success itself.",157,Response Model/DeleteTodoResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/TimeDiffResponseModel.java,TimeDiffResponseModel.java,1.0,"This class clearly acts as a DTO, representing the output of a time difference calculation. It implements a `ResponseModel` interface, explicitly aligning with the concept's intent to provide a stable contract for data returned by a use case or API endpoint.",409,Response Model/TimeDiffResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentResponseModel.java,GetCommentResponseModel.java,1.0,"The `GetCommentResponseModel` is explicitly named as a ""ResponseModel"" and implements the `ResponseModel` interface, clearly indicating its role as a DTO for an API endpoint's output. It holds `CommentData`, which is the specific data returned, aligning perfectly with the concept's description of providing a clear contract for returned data.",191,Response Model/GetCommentResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/framework/boundary/ResponseModel.java,ResponseModel.java,0.5,"This code defines an empty interface `ResponseModel`. While it establishes the *intent* and *role* of a response model by its name and inheritance from `DropoverModel`, it lacks any concrete mechanism or structure to represent data. It's a placeholder, not a functional DTO yet.",99,Response Model/ResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingDateResponseModel.java,GetSchedulingDateResponseModel.java,1.0,"This class perfectly aligns with the definition of a Response Model. It's a simple DTO, implementing a `ResponseModel` interface, designed to carry data as the output of a use case or API endpoint, providing a clear contract for the returned data.",318,Response Model/GetSchedulingDateResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/UploadFileResponseModel.java,UploadFileResponseModel.java,1.0,"This class is explicitly named `UploadFileResponseModel` and implements a `ResponseModel` interface, clearly indicating its role as a DTO for an upload file operation's output. It contains data (`fileName`) relevant to that output, fulfilling the concept's definition.",186,Response Model/UploadFileResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingResponseModel.java,AddSchedulingResponseModel.java,1.0,"This class perfectly aligns with the definition of a Response Model. It's a simple DTO, `AddSchedulingResponseModel`, intended to represent the output of an operation (likely adding a scheduling entry), containing a single field `schedulingId`. It implements a `ResponseModel` interface, further solidifying its role as a contract for returned data.",198,Response Model/AddSchedulingResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingResponseModel.java,GetSchedulingResponseModel.java,1.0,"This class perfectly embodies a Response Model. It's a simple DTO, implementing a `ResponseModel` interface, designed to carry data from a use case (or boundary) to a delivery mechanism. Its fields represent the output contract for a ""Get Scheduling"" operation, aligning with the concept's rationale of providing a clear and stable contract.",416,Response Model/GetSchedulingResponseModel.java
technical,Response Model,A data transfer object (DTO) that represents the output of a use case or an API endpoint.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingDateResponseModel.java,AddSchedulingDateResponseModel.java,1.0,"This class perfectly aligns with the definition of a Response Model. It's a simple DTO, intended to carry data back from a use case (likely `AddSchedulingDate`) to a delivery mechanism, providing a clear contract for the output. The `ResponseModel` interface further solidifies its role.",223,Response Model/AddSchedulingDateResponseModel.java
technical,POJO Entities,Plain Old Java Objects (POJOs) are used to represent the core business entities. These objects are simple data containers without framework dependencies.,../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/pojo/PojoComment.java,PojoComment.java,0.9,"The `PojoComment` class largely adheres to the POJO concept. It's a simple data container with private fields, getters, and setters. It implements an interface (`Comment`), which is acceptable for POJOs as it defines a contract without introducing framework dependencies. The only minor deviation is the `PojoComment(PojoComment commentToClone)` constructor, which is a specific utility constructor rather than a pure data container aspect, but doesn't introduce framework coupling.",2581,POJO Entities/PojoComment.java
technical,POJO Entities,Plain Old Java Objects (POJOs) are used to represent the core business entities. These objects are simple data containers without framework dependencies.,../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/pojo/PojoCreator.java,PojoCreator.java,1.0,"This class perfectly embodies a POJO. It's a simple data container with private fields, public getters and setters, and constructors. It has no dependencies on any specific framework, only on a `Creator` interface, which is a core domain abstraction, not a framework. This aligns perfectly with the concept's rationale of portability and testability.",2318,POJO Entities/PojoCreator.java
technical,POJO Entities,Plain Old Java Objects (POJOs) are used to represent the core business entities. These objects are simple data containers without framework dependencies.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/pojo/PojoSchedulingUser.java,PojoSchedulingUser.java,1.0,"This class perfectly embodies a POJO. It's a simple data container with fields, a constructor, and getters. It has no framework dependencies, only implements an interface, and its purpose is clearly to represent a core business entity (a scheduling user).",480,POJO Entities/PojoSchedulingUser.java
technical,POJO Entities,Plain Old Java Objects (POJOs) are used to represent the core business entities. These objects are simple data containers without framework dependencies.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/pojo/PojoTodo.java,PojoTodo.java,0.9,"The `PojoTodo` class is a simple data container with private fields, getters, and setters. It only imports `java.util.Date` and a local interface `at.dropover.todo.entity.Todo`, which are standard Java libraries and an internal contract, respectively. There are no framework-specific annotations or dependencies, aligning perfectly with the definition of a POJO entity. The only minor deviation is the implementation of an interface, which is generally acceptable for POJOs as long as the interface itself is also framework-agnostic.",2055,POJO Entities/PojoTodo.java
technical,POJO Entities,Plain Old Java Objects (POJOs) are used to represent the core business entities. These objects are simple data containers without framework dependencies.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/pojo/PojoUploaderInfo.java,PojoUploaderInfo.java,0.9,"This class is named `PojoUploaderInfo` and implements an interface `UploaderInformation`. It contains only data fields, a constructor, getters, and overridden `hashCode`/`equals` methods. It has no framework-specific annotations or dependencies beyond standard Java libraries and a custom interface, aligning well with the POJO definition. The slight deduction is due to implementing an interface, which, while not a framework dependency, adds a minor layer of coupling compared to a pure, standalone POJO.",1699,POJO Entities/PojoUploaderInfo.java
technical,POJO Entities,Plain Old Java Objects (POJOs) are used to represent the core business entities. These objects are simple data containers without framework dependencies.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/pojo/PojoScheduling.java,PojoScheduling.java,0.9,"The `PojoScheduling` class largely adheres to the POJO concept. It primarily holds data (position, title, lists of users/dates) and has simple getters/setters. It does not depend on any specific framework classes for its core functionality, making it portable. The dependencies on `Scheduling`, `SchedulingDate`, `SchedulingKey`, and `SchedulingUser` are interfaces or other POJOs within the same domain, which is acceptable for a POJO entity.",4470,POJO Entities/PojoScheduling.java
technical,POJO Entities,Plain Old Java Objects (POJOs) are used to represent the core business entities. These objects are simple data containers without framework dependencies.,../../../dropover-at/backend/src/main/java/at/dropover/site/entity/pojo/PojoLocation.java,PojoLocation.java,1.0,"This class perfectly embodies a POJO. It's a simple data container with only private final fields, a constructor to initialize them, and public getters. It has no framework dependencies, no business logic, and no complex behavior, aligning perfectly with the POJO definition for an entity. The `Location` interface it implements is also part of the domain, not a framework.",947,POJO Entities/PojoLocation.java
technical,POJO Entities,Plain Old Java Objects (POJOs) are used to represent the core business entities. These objects are simple data containers without framework dependencies.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/pojo/PojoSchedulingDate.java,PojoSchedulingDate.java,0.9,"This class largely adheres to the POJO concept. It primarily holds data (title, id, lists) and provides simple getters/setters. The `StringUtils` dependency is a minor deviation but doesn't introduce framework coupling. The `convertString2List` method is a utility for constructor initialization, not core business logic. It implements an interface, which is acceptable for POJOs.",1889,POJO Entities/PojoSchedulingDate.java
technical,POJO Entities,Plain Old Java Objects (POJOs) are used to represent the core business entities. These objects are simple data containers without framework dependencies.,../../../dropover-at/backend/src/main/java/at/dropover/site/entity/pojo/PojoSite.java,PojoSite.java,0.9,"This class largely adheres to the POJO concept. It's a simple data container with no framework-specific annotations or dependencies. It implements an interface, which is acceptable for POJOs as long as the interface itself is also framework-agnostic. The use of `final` fields and defensive copying for `Date` objects are good practices for immutability, not violations of the POJO principle.",1944,POJO Entities/PojoSite.java
technical,POJO Entities,Plain Old Java Objects (POJOs) are used to represent the core business entities. These objects are simple data containers without framework dependencies.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/pojo/PojoTodoList.java,PojoTodoList.java,0.8,"The class is a simple data container with no framework dependencies, aligning with the POJO concept. The `Comparator` field and the `Collections.sort` call in `getTodos()` introduce a minor behavioral aspect beyond pure data holding, slightly deviating from the strictest definition of a ""plain"" object, but it's still largely a data structure.",1156,POJO Entities/PojoTodoList.java
technical,Validation,The application uses dedicated validator classes to ensure the integrity and correctness of input data before processing it.,../../../dropover-at/backend/src/main/java/at/dropover/files/validation/FileTransferValidator.java,FileTransferValidator.java,1.0,"This code perfectly implements the concept of dedicated validator classes. `FileTransferValidator` is a specific class solely responsible for validating various aspects of file transfers (upload, download, abuse reports). It centralizes validation logic, throwing exceptions for invalid data, aligning directly with the rationale provided.",2301,Validation/FileTransferValidator.java
technical,Validation,The application uses dedicated validator classes to ensure the integrity and correctness of input data before processing it.,../../../dropover-at/backend/src/main/java/at/dropover/mail/interactor/validation/SendMailValidation.java,SendMailValidation.java,0.7,"The class `SendMailValidation` is explicitly named for validation and extends `SiteDependentRequestValidator`, indicating its role as a dedicated validator. While its internal validation logic isn't visible here, its structure and naming strongly suggest it centralizes validation for mail sending.",381,Validation/SendMailValidation.java
technical,Validation,The application uses dedicated validator classes to ensure the integrity and correctness of input data before processing it.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/validation/TodoValidation.java,TodoValidation.java,0.9,"The `TodoValidation` class is a dedicated validator class. It centralizes various validation rules for `Todo` and `TodoList` entities, throwing exceptions for invalid input. This directly aligns with the concept's description of using dedicated classes for input data integrity.",2803,Validation/TodoValidation.java
technical,Validation,The application uses dedicated validator classes to ensure the integrity and correctness of input data before processing it.,../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/validation/CommentRequestValidator.java,CommentRequestValidator.java,0.5,"This class is named `CommentRequestValidator` and extends `SiteDependentRequestValidator`, suggesting its role in validation. However, it's an empty class, only calling its super constructor. Without seeing the superclass or any actual validation logic within this class or its hierarchy, it's impossible to confirm if it *meaningfully* implements the concept of dedicated validation. It *sets up* for validation but doesn't show it.",394,Validation/CommentRequestValidator.java
technical,Validation,The application uses dedicated validator classes to ensure the integrity and correctness of input data before processing it.,../../../dropover-at/backend/src/main/java/at/dropover/mail/entity/channel/common/MailChannelValidator.java,MailChannelValidator.java,0.9,"This class is explicitly named ""MailChannelValidator"" and contains methods that perform validation checks on input parameters (`from`, `to`, `tos`). It uses external libraries (`StringUtils`, `EmailValidator`) for validation logic, centralizing these checks within a dedicated class, which directly aligns with the concept's description of using dedicated validator classes.",843,Validation/MailChannelValidator.java
technical,Validation,The application uses dedicated validator classes to ensure the integrity and correctness of input data before processing it.,../../../dropover-at/backend/src/main/java/at/dropover/site/validation/SiteDependentRequestValidator.java,SiteDependentRequestValidator.java,0.9,"This class is explicitly named `SiteDependentRequestValidator` and its `doSync` method performs validation checks on a `SiteDependentRequestModel`. It centralizes checks for nulls, blank strings, and the existence of a site, throwing specific exceptions for invalid states. This directly aligns with the concept of using dedicated validator classes for input data integrity.",1413,Validation/SiteDependentRequestValidator.java
technical,Validation,The application uses dedicated validator classes to ensure the integrity and correctness of input data before processing it.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/validation/SchedulingRequestValidator.java,SchedulingRequestValidator.java,0.9,"The code clearly implements the concept of dedicated validator classes. `SchedulingRequestValidator` is a specific class whose sole responsibility is to validate various request models (`AddSchedulingRequestModel`, `VoteForSchedulingDateRequestModel`, etc.) before they are processed. It centralizes validation logic, throwing exceptions for invalid input and utilizing gateway classes to check for existence in the persistence layer.",6470,Validation/SchedulingRequestValidator.java
technical,Validation,The application uses dedicated validator classes to ensure the integrity and correctness of input data before processing it.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/validation/TodoRequestValidator.java,TodoRequestValidator.java,1.0,"This class is explicitly named `TodoRequestValidator` and its `doSync` method performs validation checks on a `TodoRequestModel`. It centralizes validation logic for `TodoRequestModel` instances, aligning perfectly with the concept of dedicated validator classes.",1275,Validation/TodoRequestValidator.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/delivery/rest/SiteResource.java,SiteResource.java,0.9,"The `SiteResource` clearly represents a 'Site' by encapsulating a `currentSite` name. It then provides sub-resources (comments, todolists, schedulings, files) that are explicitly scoped to this `currentSite`, demonstrating the partitioning of data as described in the concept. The constructor injection of `siteName` further reinforces its role as a distinct container.",2493,Site/SiteResource.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/Site.java,Site.java,0.6,"The `Site` interface defines attributes like name, title, description, and dates, which are consistent with a distinct container for content. The presence of `Creator` and `Location` suggests it's a specific entity, but without seeing how other business concepts are *scoped within* this `Site` (e.g., foreign keys, relationships), its role as a multi-tenancy partition is not fully evident from this interface alone. It *could* be a site, but it could also just be a generic event or location.",428,Site/Site.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/namegeneration/RandomSiteNameGenerator.java,RandomSiteNameGenerator.java,0.1,"This code generates random names, which *could* be used for site names, but it doesn't define, manage, or interact with a 'Site' concept itself. It's a utility for naming, not an implementation of the 'Site' entity or its multi-tenancy purpose. Its role is purely generative, not conceptual.",617,Site/RandomSiteNameGenerator.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/GetSiteResponseModel.java,GetSiteResponseModel.java,0.1,"This file is a *response model* for retrieving site data, not the implementation of the 'Site' concept itself. It merely contains fields that *relate* to a site (like `createdAt`), but doesn't define or manage the multi-tenancy or partitioning aspect of a 'Site'. The actual 'Site' entity or service would be elsewhere.",331,Site/GetSiteResponseModel.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/gateway/SiteGateway.java,SiteGateway.java,0.9,"This `SiteGateway` interface directly interacts with the `Site` entity, providing methods to `read` and `produce` (create/persist) `Site` objects. The `Site` entity itself is explicitly mentioned and manipulated, indicating that the concept of a 'Site' as a distinct container is central to this gateway's purpose. The methods' parameters like `siteName` and `title` further reinforce the idea of managing individual, identifiable sites.",1762,Site/SiteGateway.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/GetSiteData.java,GetSiteData.java,0.8,"This code directly manipulates `Site` entities and transforms them into `SiteData`. It clearly recognizes and processes the `Site` concept, including its associated `Location` and `Creator` data, aligning with the idea of a `Site` as a container for related content. While it doesn't show the multi-tenancy aspect directly, its existence as a central entity for data aggregation strongly supports the concept.",1298,Site/GetSiteData.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/CreateSiteResponseModel.java,CreateSiteResponseModel.java,0.1,"This file is a response model for creating a site. While it *references* a `SiteData` object, it doesn't *implement* the concept of a 'Site' itself. It's merely a data transfer object for an operation related to a site, not the site entity or its multi-tenancy mechanism.",253,Site/CreateSiteResponseModel.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/Location.java,Location.java,0.0,"This code defines a `Location` interface, which describes geographical coordinates and descriptive information. It has no direct or indirect relation to the `Site` concept as described (a container for content for multi-tenancy). The package name `at.dropover.site.entity` is misleading in this context.",761,Site/Location.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/GetSiteRequestModel.java,GetSiteRequestModel.java,0.7,"This `RequestModel` directly references ""siteName"", indicating its role in identifying or retrieving a specific 'Site'. While it doesn't define the 'Site' itself, it's a clear mechanism for interacting with the concept, aligning with the idea of scoping data within a site.",417,Site/GetSiteRequestModel.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/pojo/PojoSite.java,PojoSite.java,0.8,"This `PojoSite` class is an in-memory implementation of the `Site` interface. It defines attributes like title, name, description, and dates, which are consistent with the idea of a distinct container or context. While this specific POJO doesn't directly show how other business concepts are ""scoped within"" it, its existence as a `Site` entity is a foundational step towards that multi-tenancy goal.",1944,Site/PojoSite.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/GetSite.java,GetSite.java,0.9,"This code clearly implements the 'Site' concept. It retrieves a `Site` entity using a `SiteGateway`, processes its data, and returns it. The `Site` entity itself, with properties like name, title, description, and location, directly represents the described container for content. The `siteName` in the request model further reinforces its role as a distinct identifier for a specific site.",3375,Site/GetSite.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/LocationData.java,LocationData.java,0.0,"This `LocationData` class is a simple data holder for geographical coordinates and descriptive strings. It contains no fields, methods, or structural elements that would indicate it represents or is related to a ""Site"" concept as described (a container for content, supporting multi-tenancy or data partitioning). Its purpose is clearly for location information, not site management.",179,Site/LocationData.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/exception/SiteNotPersistentException.java,SiteNotPersistentException.java,0.2,"This file is an exception class, `SiteNotPersistentException`. While it references `PojoSite` and `siteName`, indicating the existence of a 'Site' concept, it doesn't *implement* the 'Site' itself. It merely handles an error condition related to its persistence. The core implementation of 'Site' would be in an entity or model class, not an exception.",668,Site/SiteNotPersistentException.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/SiteData.java,SiteData.java,0.6,"This `SiteData` class appears to be a data transfer object (DTO) representing attributes of a 'Site'. While it doesn't show the 'Site' acting as a container or scoping mechanism directly, its existence with fields like `name`, `title`, `description`, and `eventDate` strongly suggests it's the data representation of the 'Site' concept described. The `LocationData` further implies a distinct entity.",359,Site/SiteData.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/namegeneration/BaseEncoder.java,BaseEncoder.java,0.0,"This `BaseEncoder` class is a utility for generating short URLs using base conversion. It has no direct or indirect relation to the concept of a 'Site' as described (a container for content, supporting multi-tenancy or data partitioning). Its functionality is purely algorithmic for string encoding.",2320,Site/BaseEncoder.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/CreateSite.java,CreateSite.java,1.0,"The `CreateSite` interactor directly manipulates and stores `Site` entities, which are explicitly defined and used as the core concept for partitioning data. The code demonstrates the creation of a distinct 'Site' container with associated properties and a creator, aligning perfectly with the multi-tenancy/data partitioning rationale.",4282,Site/CreateSite.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/gateway/inmemory/InMemorySiteGateway.java,InMemorySiteGateway.java,1.0,"This code clearly implements the 'Site' concept. It defines an `InMemorySiteGateway` that stores `Site` objects (specifically `PojoSite`) in a `HashMap` keyed by the site's name. The `read` method retrieves a site by name, and `produceSite` creates and stores new sites. This directly supports the idea of distinct, named containers for content, aligning with the multi-tenancy/partitioning rationale.",1504,Site/InMemorySiteGateway.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/gateway/aws/DynamoDbSiteGateway.java,DynamoDbSiteGateway.java,1.0,"The `DynamoDbSiteGateway` directly interacts with a ""Site"" table in DynamoDB, using ""siteName"" as a primary identifier for reading and producing `Site` objects. This clearly aligns with the concept of a 'Site' as a distinct container for content, enabling data partitioning based on the site name.",6467,Site/DynamoDbSiteGateway.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/delivery/rest/SitesResource.java,SitesResource.java,0.9,"The `SitesResource` clearly manages the creation and retrieval of ""Site"" entities. The `@Path(""{siteName}"")` annotation for `getBaseSite` and the `createSite` method directly align with the concept of distinct, addressable containers. The `SiteResource` (though not provided) is implied to handle operations *within* a specific site, reinforcing the isolation aspect.",4072,Site/SitesResource.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/validation/SiteDependentRequestValidator.java,SiteDependentRequestValidator.java,0.9,"This code explicitly validates the existence of a 'site' based on a `siteName` provided in a request model, using a `SiteGateway`. This directly supports the concept of scoping other business concepts within a specific site by ensuring the site's validity.",1413,Site/SiteDependentRequestValidator.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/entity/pojo/PojoLocation.java,PojoLocation.java,0.1,"This code defines a `PojoLocation` class, which represents geographical coordinates and a name/description. It has no discernible connection to the concept of a ""Site"" as described (a container for multi-tenancy or data partitioning). It's a simple data structure for a location.",947,Site/PojoLocation.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/boundary/CreateSiteRequestModel.java,CreateSiteRequestModel.java,0.1,"This file is a request model for creating a site. While it *relates* to the concept of a 'Site', it doesn't *implement* the 'Site' concept itself. It's merely a data transfer object for an operation involving a Site. The actual implementation of the 'Site' as a distinct container or context would be found in an entity, service, or repository, not a request model.",179,Site/CreateSiteRequestModel.java
business,Site,"A 'Site' represents a distinct container or context for content like comments, files, and schedules. Most other business concepts are scoped within a specific site.",../../../dropover-at/backend/src/main/java/at/dropover/site/interactor/namegeneration/AlphabeticBase26Encoder.java,AlphabeticBase26Encoder.java,0.0,"This file is an `AlphabeticBase26Encoder`, which is a utility for generating names or codes. It has no direct or indirect relation to the concept of a 'Site' as described (a container for multi-tenancy or data partitioning). Its package name `at.dropover.site.interactor.namegeneration` suggests it might be *used within* a site-related context, but the code itself does not implement or define a 'Site'.",513,Site/AlphabeticBase26Encoder.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/ChangeComment.java,ChangeComment.java,1.0,"This code directly implements the ""change"" aspect of the Comment concept. It takes a request to modify an existing comment's content, validates it, encodes the new content, and then uses a gateway to persist the change. This aligns perfectly with the ""Comments can be... changed"" part of the concept description.",2055,Comment/ChangeComment.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/validation/CommentRequestValidator.java,CommentRequestValidator.java,0.1,"This file is a `CommentRequestValidator`. While it's related to the `Comment` concept, it doesn't implement the core functionality of a `Comment` (creation, retrieval, modification, association with Site/Creator). It's a validation component, not the `Comment` itself.",394,Comment/CommentRequestValidator.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/ChangeCommentRequestModel.java,ChangeCommentRequestModel.java,0.4,"This class is a request model for changing a comment, which is a part of the 'Comment' concept. However, it only represents the data for a change operation and doesn't implement the full concept of a 'Comment' itself (e.g., creation, retrieval, or its full state).",240,Comment/ChangeCommentRequestModel.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentsRequestModel.java,GetCommentsRequestModel.java,0.1,"This file is a request model for *getting* comments, not the comment entity itself. It inherits from `SiteDependentRequestModel`, indicating it's related to comments on a site, but it doesn't define the `Comment` concept's attributes, behavior, or relationships as described. It's a small part of a larger system that *might* implement comments, but this file alone does not.",181,Comment/GetCommentsRequestModel.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentsResponseModel.java,GetCommentsResponseModel.java,0.2,"This file is a response model for retrieving comments, indicating the *existence* of a Comment concept. However, it doesn't *implement* the Comment itself (its creation, modification, or full retrieval logic), only a container for its data. The actual Comment implementation would be in an entity or service class.",223,Comment/GetCommentsResponseModel.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/inmemory/InMemoryCommentStorage.java,InMemoryCommentStorage.java,1.0,"This code clearly implements the 'Comment' concept. It defines methods for adding (`produceComment`), changing (`changeComment`), and retrieving (`read`) comments, associating them with a 'Site' (via `siteName`) and a 'Creator'. The `Comment` interface and `PojoComment` class represent the textual content.",4328,Comment/InMemoryCommentStorage.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/CreateTimeDiff.java,CreateTimeDiff.java,0.0,"This code calculates time differences between two dates. It has no direct relation to the concept of a ""Comment"" as described (text content associated with a Site and Creator). It's a utility class for date/time formatting, not a core feature for managing comments.",5705,Comment/CreateTimeDiff.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/CommentResponseBuilder.java,CommentResponseBuilder.java,0.8,"This code is a ""ResponseBuilder"" for comments, meaning it processes and formats `Comment` entities for presentation. It clearly handles `Comment` objects, converting them into `CommentData` which is then used in various response models (`GetCommentResponseModel`, `GetCommentsResponseModel`). While it doesn't directly implement the ""add, change, retrieve"" operations, it is an integral part of the ""retrieve"" mechanism by structuring the retrieved data. Its role is to prepare the `Comment` for display, aligning with the concept's need for content interaction.",2789,Comment/CommentResponseBuilder.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentRequestModel.java,GetCommentRequestModel.java,0.1,"This file defines a request model for retrieving a comment by its position within a site. While it relates to the 'Comment' concept by being part of its boundary layer, it doesn't *implement* the 'Comment' itself (its creation, storage, or content). It's merely a data structure for a specific retrieval operation.",206,Comment/GetCommentRequestModel.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/AddCommentRequestModel.java,AddCommentRequestModel.java,0.2,"This file defines a request model for adding a comment, containing fields for text and creator name. While it's *related* to the concept of a 'Comment', it doesn't *implement* the 'Comment' itself (i.e., the entity or data structure representing a comment). It's merely a DTO for an operation involving a comment.",289,Comment/AddCommentRequestModel.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/GetRangedComments.java,GetRangedComments.java,0.9,"This code directly implements the retrieval aspect of the 'Comment' concept. It fetches a range of comments associated with a 'Site' (via `siteName`), demonstrating the ability to retrieve comments. The use of `CommentGateway` and `Comment` entity confirms its role in managing comment data.",1489,Comment/GetRangedComments.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetRangedCommentsRequestModel.java,GetRangedCommentsRequestModel.java,0.1,"This file defines a request model for retrieving a *range* of comments, not the 'Comment' concept itself. It contains parameters for pagination (numberOfComments, offset) and extends a SiteDependentRequestModel, indicating it's for fetching comments related to a site. However, it does not define the structure, behavior, or properties of a 'Comment' entity as described in the concept.",245,Comment/GetRangedCommentsRequestModel.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/exception/CommentNotFoundException.java,CommentNotFoundException.java,0.1,"This file defines an exception for when a Comment is not found. While related to the 'Comment' concept, it does not implement the core functionalities of adding, changing, or retrieving a Comment. It's an auxiliary component, not the concept itself.",434,Comment/CommentNotFoundException.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/Comment.java,Comment.java,0.9,"This interface defines the core attributes of a 'Comment' as described: content, creator, and association with a 'Site' (via `getSiteName()`). It also includes creation date and position, which are relevant for a comment. The 'change' aspect is not directly visible in an interface, but the 'add' and 'retrieve' are implied by the entity definition.",298,Comment/Comment.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/aws/CommentSorter.java,CommentSorter.java,0.1,"This code defines a `Comparator` for `Comment` objects based on their `position`. It does not implement the core concept of a ""Comment"" as described (creation, retrieval, association with Site/Creator), but rather a utility for sorting existing Comment objects.",437,Comment/CommentSorter.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/delivery/rest/CommentsResource.java,CommentsResource.java,1.0,"This `CommentsResource` class clearly implements the ""Comment"" concept. It provides REST endpoints for adding (`addComment`) and retrieving (`listAllComments`, `getCommentResource`) comments, associating them with a `Site` (via `siteName`) and a `Creator` (via `creator` parameter). The methods directly map to the described functionalities of adding, changing (implicitly via `CommentResource` which would handle updates), and retrieving comments.",2796,Comment/CommentsResource.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/aws/DynamoDbCommentGateway.java,DynamoDbCommentGateway.java,1.0,"The `DynamoDbCommentGateway` class directly implements the `CommentGateway` interface, providing methods for adding (`produceComment`), changing (`changeComment`), and retrieving (`read`) `Comment` entities. It clearly handles the persistence of comments, associating them with a `Site` (via `siteName`) and a `Creator`. The class's purpose is explicitly to manage `Comment` data in DynamoDB, aligning perfectly with the concept's description.",7749,Comment/DynamoDbCommentGateway.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/GetCommentResponseModel.java,GetCommentResponseModel.java,0.1,"This file is a response model for retrieving a comment. While it contains a `CommentData` object, it doesn't implement the core functionalities of a ""Comment"" as described (adding, changing, retrieving comments associated with a site and creator). It's merely a data carrier for a retrieved comment, not the implementation of the concept itself.",191,Comment/GetCommentResponseModel.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/TimeDiffResponseModel.java,TimeDiffResponseModel.java,0.0,"This code defines a data structure for time differences, likely used for displaying relative time (e.g., ""5 minutes ago""). It has no direct relation to the ""Comment"" concept, which involves textual content, sites, and creators.",409,Comment/TimeDiffResponseModel.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/pojo/PojoComment.java,PojoComment.java,1.0,"This PojoComment class directly implements the `Comment` interface and holds all the specified attributes: `content` (text content), `sitename` (associated with a Site), and `creator`. It provides methods for setting and retrieving these, fulfilling the ""added, changed, and retrieved"" requirement.",2581,Comment/PojoComment.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/delivery/rest/CommentResource.java,CommentResource.java,0.9,"This `CommentResource` clearly handles the creation and modification of comments, aligning with the ""add"" and ""change"" aspects of the concept. It interacts with `AddComment` and `ChangeComment` interactors, indicating a clear mechanism for these operations. Retrieval is implied by the `GetCommentResponseModel` but not explicitly shown as a separate endpoint.",2974,Comment/CommentResource.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/exception/PostNotInPastException.java,PostNotInPastException.java,0.0,"This file defines a custom exception `PostNotInPastException`. It is a utility class for error handling and does not directly implement any part of the 'Comment' concept (creation, retrieval, association with Site/Creator, or content storage).",190,Comment/PostNotInPastException.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/AddComment.java,AddComment.java,1.0,"This code directly implements the ""add"" aspect of the Comment concept. It takes a request model, validates it, creates a new Comment entity via a gateway, and associates it with a Creator and Site (implicitly via `siteName` in `produceCreator` and `produceComment`). It clearly handles the creation of a new comment, aligning perfectly with the concept's description.",2907,Comment/AddComment.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/TimeDiffRequestModel.java,TimeDiffRequestModel.java,0.0,"This code defines a `TimeDiffRequestModel` which is clearly related to time differences, not comments. It contains `Date` and `Locale` fields, none of which directly represent or contribute to the concept of a ""Comment"" as described (text content, associated with a Site, created by a Creator).",283,Comment/TimeDiffRequestModel.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/CommentGateway.java,CommentGateway.java,1.0,"This `CommentGateway` interface clearly defines methods for creating (`produceComment`), retrieving (`read`), and changing (`changeComment`) `Comment` entities. It also includes methods to count comments and retrieve them based on site, position, and pagination, directly supporting the ""add, change, and retrieve"" aspects of the `Comment` concept. The parameters like `siteName` and `creator` further align with the concept's description.",2010,Comment/CommentGateway.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/entity/gateway/exception/NotSoManyCommentsAvailable.java,NotSoManyCommentsAvailable.java,0.0,"This file defines a custom exception class related to comment availability, not the 'Comment' entity itself or its core functionalities (add, change, retrieve). It's a utility class for error handling, not an implementation of the concept.",358,Comment/NotSoManyCommentsAvailable.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/boundary/CommentData.java,CommentData.java,0.6,"This `CommentData` class clearly represents the *data structure* for a Comment, including fields for creator, content, and creation date. However, it's a DTO/response model and doesn't implement the *behavior* (add, change, retrieve) described in the concept. It's a necessary component but not the full implementation.",316,Comment/CommentData.java
business,Comment,"A 'Comment' is a piece of text content associated with a 'Site' and created by a 'Creator'. Comments can be added, changed, and retrieved.",../../../dropover-at/backend/src/main/java/at/dropover/comment/interactor/GetComments.java,GetComments.java,1.0,"This code directly implements the retrieval aspect of the 'Comment' concept. It uses `CommentGateway` to read `Comment` entities based on a `siteName`, which aligns perfectly with the description of comments being associated with a 'Site' and being retrievable. The class name `GetComments` and its role as an interactor further confirm its intent to handle comment retrieval.",1402,Comment/GetComments.java
business,Creator,"A 'Creator' represents the user who creates content, such as a 'Comment'. A creator has a nickname and is associated with a 'Site'.",../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/CreatorGateway.java,CreatorGateway.java,1.0,"The `CreatorGateway` interface clearly defines methods for loading, producing, and managing `Creator` entities. The methods like `loadSiteCreator` and `loadCommentCreator` explicitly link creators to sites and comments, aligning perfectly with the concept's description of a creator having a nickname and being associated with a site for content attribution.",743,Creator/CreatorGateway.java
business,Creator,"A 'Creator' represents the user who creates content, such as a 'Comment'. A creator has a nickname and is associated with a 'Site'.",../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/pojo/PojoCreator.java,PojoCreator.java,0.9,"The `PojoCreator` class directly implements the `Creator` interface, providing fields for `nickName` and `siteName` as specified in the concept. It also includes a `creatorId` for unique identification. The presence of `firstName`, `lastName`, and `email` are additional attributes that enrich the Creator concept, but the core requirements are met.",2318,Creator/PojoCreator.java
business,Creator,"A 'Creator' represents the user who creates content, such as a 'Comment'. A creator has a nickname and is associated with a 'Site'.",../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/inmemory/InMemoryCreatorGateway.java,InMemoryCreatorGateway.java,0.9,"The `InMemoryCreatorGateway` clearly manages `Creator` objects, which are associated with a nickname and a site name (via `PojoCreator`). It provides methods to produce, load, and store these creators, fulfilling the core requirements of attributing content to users and managing user-related information. The use of `CreatorKey` for generating unique identifiers based on nickname and site further reinforces this.",2665,Creator/InMemoryCreatorGateway.java
business,Creator,"A 'Creator' represents the user who creates content, such as a 'Comment'. A creator has a nickname and is associated with a 'Site'.",../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/exception/CreatorNotPersistentException.java,CreatorNotPersistentException.java,0.0,"This file defines an exception class, `CreatorNotPersistentException`. It does not define or implement the `Creator` concept itself, nor does it contain any attributes or methods related to a creator's nickname or association with a site. It's merely an exception that might be thrown in the context of a Creator, but it is not the Creator.",193,Creator/CreatorNotPersistentException.java
business,Creator,"A 'Creator' represents the user who creates content, such as a 'Comment'. A creator has a nickname and is associated with a 'Site'.",../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/Creator.java,Creator.java,0.9,"The `Creator` interface clearly defines methods for a nickname (`getNickName()`) and a site association (`getSiteName()`), directly aligning with the concept's description. It also includes an ID and other personal details, which are relevant for managing user information.",228,Creator/Creator.java
business,Creator,"A 'Creator' represents the user who creates content, such as a 'Comment'. A creator has a nickname and is associated with a 'Site'.",../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/CreatorKey.java,CreatorKey.java,0.1,"This `CreatorKey` class focuses solely on generating string keys, not on representing the `Creator` concept itself. It lacks attributes like `nickname` or `associated Site` and doesn't manage user-related information. It's a utility for key generation, not a Creator entity.",442,Creator/CreatorKey.java
business,Creator,"A 'Creator' represents the user who creates content, such as a 'Comment'. A creator has a nickname and is associated with a 'Site'.",../../../dropover-at/backend/src/main/java/at/dropover/creator/entity/gateway/aws/DynamoDbCreatorGateway.java,DynamoDbCreatorGateway.java,1.0,"The `DynamoDbCreatorGateway` clearly implements the Creator concept. It stores and retrieves `Creator` objects, which have a nickname and are associated with a `Site` (via `sitename`). The `CreatorKey` generates unique keys based on nickname and sitename, directly supporting the concept's requirements for attribution and user management.",5121,Creator/DynamoDbCreatorGateway.java
business,Creator,"A 'Creator' represents the user who creates content, such as a 'Comment'. A creator has a nickname and is associated with a 'Site'.",../../../dropover-at/backend/src/main/java/at/dropover/creator/interactor/FormatCreatorNicely.java,FormatCreatorNicely.java,0.5,"This code interacts with a `Creator` entity, accessing its `firstName`, `lastName`, and `nickName`. It formats these attributes for display. While it uses the `Creator` concept, it doesn't define or manage the `Creator` itself, nor does it show any association with a `Site`. It only consumes parts of the `Creator`'s data.",1202,Creator/FormatCreatorNicely.java
business,Creator,"A 'Creator' represents the user who creates content, such as a 'Comment'. A creator has a nickname and is associated with a 'Site'.",../../../dropover-at/backend/src/main/java/at/dropover/creator/boundary/CreatorData.java,CreatorData.java,0.8,"This `CreatorData` class clearly represents a 'Creator' by holding `nickName`, `firstName`, and `lastName`. It takes a `Creator` entity in its constructor, indicating it's a data transfer object for creator information. While it doesn't explicitly show the 'Site' association, it directly implements the core 'Creator' attributes and role as described.",454,Creator/CreatorData.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/interactor/ReportAbuse.java,ReportAbuse.java,0.9,"This code directly implements the ""report for abuse"" aspect of the file concept. It takes site and file names as input, validates them, and sends an email, fulfilling the described functionality. While it doesn't handle upload/download, it clearly addresses the abuse reporting mechanism.",1472,File/ReportAbuse.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/exception/InvalidFileException.java,InvalidFileException.java,0.1,"This file defines a custom exception for invalid file uploads. While exceptions are part of a robust file handling system, this specific file *alone* does not implement the core concept of file uploads, downloads, association with a 'Site', or abuse reporting. It's a supporting component, not the implementation itself.",597,File/InvalidFileException.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/ReportAbuseRequestModel.java,ReportAbuseRequestModel.java,0.6,"This class is a request model for reporting abuse of a file. It directly relates to the ""Files can be reported for abuse"" part of the concept. While it doesn't handle the upload/download or association with a Site directly, its existence strongly implies the file concept is being implemented elsewhere.",298,File/ReportAbuseRequestModel.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/validation/FileTransferValidator.java,FileTransferValidator.java,0.8,"This `FileTransferValidator` class directly supports the ""File"" concept by validating file uploads, downloads, and abuse reports. It ensures files are associated with a `Site` and enforces constraints like file size and naming, which are crucial for a file-sharing capability. The `validateAbuseReport` method, although taking a `String` for the parent, clearly aligns with the ""reported for abuse"" aspect.",2301,File/FileTransferValidator.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/UploaderInformation.java,UploaderInformation.java,0.1,"This interface defines information about an uploader (IP, date), but it does not directly represent a ""File"" entity, nor does it show any association with a ""Site"" or mechanisms for file storage, retrieval, or abuse reporting. It's a small piece of a larger file upload system, but not the core ""File"" concept itself.",399,File/UploaderInformation.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/DownloadFileResponseModel.java,DownloadFileResponseModel.java,0.6,"This class is a response model for downloading files, containing the file's content and original filename. It directly supports the ""downloads"" aspect of the file concept. However, it doesn't show any direct association with 'Site' or 'reporting for abuse', which are also part of the concept description.",257,File/DownloadFileResponseModel.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/pojo/PojoUploaderInfo.java,PojoUploaderInfo.java,0.1,"This file defines a POJO for `UploaderInformation`, containing only upload date and IP address. It does not directly implement any file-related functionality (upload/download), nor does it link to 'Site' or 'abuse reporting'. Its role is purely informational about the uploader, not the file itself or its management.",1699,File/PojoUploaderInfo.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/inmemory/InMemoryFileGateway.java,InMemoryFileGateway.java,0.9,"The code clearly implements file upload and download functionalities, associating files with a 'Site' (parent). While explicit ""reporting for abuse"" isn't shown, the core file-sharing mechanism is present and recognizable. The in-memory nature is an implementation detail, not a concept deviation.",4501,File/InMemoryFileGateway.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/StreamingFileGateway.java,StreamingFileGateway.java,0.9,"This interface clearly defines methods for uploading, downloading, and listing files, associating them with a `Site` object. The `UploaderInformation` method also hints at the ""report for abuse"" aspect, as it provides details about the uploader. The use of `InputStream` aligns with the ""streaming"" nature of file handling.",715,File/StreamingFileGateway.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/interactor/UploadFile.java,UploadFile.java,1.0,"The `UploadFile` interactor clearly handles file uploads. It associates files with a `Site` (via `request.siteName` and `parent`), and uses a `StreamingFileGateway` for storage. While ""reporting for abuse"" isn't directly in this file, the core ""file-sharing capability"" and ""association with a Site"" are fully implemented.",4188,File/UploadFile.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/exception/FileTransferException.java,FileTransferException.java,0.1,"This file defines a custom exception for file transfer operations. While exceptions are part of a robust file handling system, this specific file *alone* does not implement the core concept of file uploads/downloads, association with a 'Site', or abuse reporting. It's merely a utility class for error handling within a broader file management system.",540,File/FileTransferException.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/interactor/DownloadFile.java,DownloadFile.java,0.8,"This code clearly handles file downloads, associating them with a 'Site' through `siteGateway.read(request.siteName)`. While it doesn't explicitly show upload or abuse reporting, its role in the file-sharing capability is evident. The `StreamingFileGateway` suggests handling file content.",1779,File/DownloadFile.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/ListFilesResponseModel.java,ListFilesResponseModel.java,0.1,"This file is a response model for listing files, containing only a list of strings (presumably filenames). It provides no information about file uploads, downloads, association with a 'Site', or reporting for abuse. It's a tiny piece of a much larger puzzle, not the implementation of the concept itself.",220,File/ListFilesResponseModel.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/s3/S3FileGateway.java,S3FileGateway.java,1.0,"This code directly implements file storage and retrieval using AWS S3, fulfilling the ""file uploads and downloads"" aspect. Files are associated with a 'Site' through S3 bucket naming (`BUCKET_NAMESPACE + parent.getName().toLowerCase()`), and uploader information is stored as metadata, which could be extended for abuse reporting. The core mechanisms align perfectly with the concept.",6305,File/S3FileGateway.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/exception/FileNotPersistentException.java,FileNotPersistentException.java,0.1,"This file defines a specific exception for when a `File` is not persistent. While exceptions are part of a system, this particular file only indicates a potential problem with file persistence, not the implementation of file upload/download, association with a 'Site', or abuse reporting. It's a very small piece of a much larger puzzle.",653,File/FileNotPersistentException.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/UploadFileRequestModel.java,UploadFileRequestModel.java,0.8,"This class is clearly designed for file uploads, containing fields for content, length, and name. Its inheritance from `SiteDependentRequestModel` directly links it to a 'Site', aligning with the concept's description of files being associated with a 'Site'. The `uploader` field also hints at tracking, which could be related to abuse reporting.",352,File/UploadFileRequestModel.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/DownloadFileRequestModel.java,DownloadFileRequestModel.java,0.2,"This class is a request model for downloading a file, indicating file-related functionality. However, it's just a data structure and doesn't directly implement the full concept of file upload/download, association with a 'Site', or abuse reporting. It only hints at the 'download' part and 'Site' dependency.",208,File/DownloadFileRequestModel.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/ReportAbuseResponeModel.java,ReportAbuseResponeModel.java,0.1,"This file is an empty response model for reporting abuse. While ""reporting abuse"" is mentioned in the concept, this specific file provides no implementation details for file uploads, downloads, association with a 'Site', or the core file-sharing capability. It's merely a placeholder for a response.",156,File/ReportAbuseResponeModel.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/interactor/ListFiles.java,ListFiles.java,0.8,"This code directly supports the ""File"" concept by listing files associated with a ""Site"". It uses a `StreamingFileGateway` to retrieve file names and a `SiteGateway` to validate the site, aligning with the described file-sharing capability within a site context. The ""upload"" and ""download"" aspects are not directly visible here, but ""listing"" is a core part of file management. ""Abuse reporting"" is not addressed by this specific interactor.",1481,File/ListFiles.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/delivery/rest/FilesResource.java,FilesResource.java,1.0,"The `FilesResource` clearly implements file upload (`@POST`), file download (`@GET` with filename path param), and reporting abuse (`@PUT` on `abuselist/{filename}`). Files are associated with a `currentSite` passed in the constructor, fulfilling all aspects of the concept description.",6452,File/FilesResource.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/entity/gateway/inmemory/FileWithMetadata.java,FileWithMetadata.java,0.2,"This class `FileWithMetadata` wraps a `java.io.File` object, indicating it deals with files. It stores metadata like uploader and storage date. However, it lacks any explicit association with a 'Site' or mechanisms for reporting abuse, which are key parts of the specified concept. It's a low-level representation, not the full concept.",748,File/FileWithMetadata.java
business,File,The application supports file uploads and downloads. Files are associated with a 'Site' and can be reported for abuse.,../../../dropover-at/backend/src/main/java/at/dropover/files/boundary/UploadFileResponseModel.java,UploadFileResponseModel.java,0.1,"This file is a simple response model for an upload operation, containing only a file name. It provides no direct evidence of file storage, association with a 'Site', or abuse reporting mechanisms. It's merely a small part of a potential upload process, not the core implementation of the file concept as described.",186,File/UploadFileResponseModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingUserResponseModel.java,AddSchedulingUserResponseModel.java,0.1,"This file is a simple response model containing only a `userId`. While it's part of the `scheduling.boundary` package, it provides no direct evidence of the ""propose and vote on dates"" mechanism, nor does it contain `SchedulingDate` or `SchedulingUser` concepts as described. It's too minimal to assess the core scheduling functionality.",195,Scheduling/AddSchedulingUserResponseModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/DeleteSchedulingUserRequestModel.java,DeleteSchedulingUserRequestModel.java,0.8,"This code defines a request model for deleting a 'SchedulingUser'. The presence of 'schedulingId' and 'name' (presumably the user's name) directly relates to managing users within a scheduling context, aligning with the concept's description of coordinating and deciding on a date among a group of users.",253,Scheduling/DeleteSchedulingUserRequestModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/SchedulingDate.java,SchedulingDate.java,0.9,"This interface clearly defines a ""SchedulingDate"" with properties like a title, ID, and lists for ""yes,"" ""no,"" and ""maybe"" votes, along with methods to add user votes. This directly aligns with the concept's description of allowing users to propose and vote on dates for an event. The ""SchedulingUser"" concept is implied by the `userId` parameters.",1262,Scheduling/SchedulingDate.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingDateResource.java,SchedulingDateResource.java,0.9,"This code directly implements the core functionalities of the 'Scheduling' concept. It handles retrieving a specific `SchedulingDate`, allowing users to `voteForDate` (propose/vote), and `setDateFinal` (decide on a date). The presence of `dateid`, `schedulingid`, and `userId` parameters aligns perfectly with the described concepts of `SchedulingDate` and `SchedulingUser` within a `Site` context.",2960,Scheduling/SchedulingDateResource.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/exception/SchedulingNotPersistentException.java,SchedulingNotPersistentException.java,0.8,"This code defines an exception related to the persistence of 'Scheduling' and 'SchedulingDate' entities. While it doesn't implement the core scheduling logic, it directly references key components of the 'Scheduling' concept, indicating its existence and the need for persistence.",605,Scheduling/SchedulingNotPersistentException.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingUserResource.java,SchedulingUserResource.java,0.7,"This code directly relates to the ""SchedulingUser"" aspect of the concept by providing a REST endpoint for deleting a user associated with a scheduling event. It handles the interaction with a `DeleteSchedulingUser` interactor, indicating a clear role in managing scheduling users. While it doesn't cover the full breadth of ""proposing and voting,"" it directly implements a core part of managing the users involved in scheduling.",1652,Scheduling/SchedulingUserResource.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/Scheduling.java,Scheduling.java,0.9,"The `Scheduling` interface clearly defines the core attributes of a scheduling entity, including a title, a list of users, a list of proposed dates, and a final chosen date. This directly aligns with the concept's description of coordinating and deciding on a date for an event among a group of users. The presence of `SchedulingUser` and `SchedulingDate` further reinforces this.",297,Scheduling/Scheduling.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingDateRequestModel.java,GetSchedulingDateRequestModel.java,0.5,"This file is a request model for retrieving a `SchedulingDate`. While it directly relates to the `SchedulingDate` concept, it's only a small part of the overall scheduling mechanism (proposing, voting, coordinating). It doesn't show the full implementation of the scheduling feature.",223,Scheduling/GetSchedulingDateRequestModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/AddSchedulingDate.java,AddSchedulingDate.java,0.9,"This code directly implements the ""Add Scheduling Date"" functionality, which is a core part of the ""Scheduling"" concept. It handles the creation and persistence of `SchedulingDate` entities, associating them with a `Scheduling` object. The presence of `SchedulingDate` and its manipulation aligns perfectly with the concept's description of allowing users to propose dates.",2790,Scheduling/AddSchedulingDate.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/DeleteSchedulingUser.java,DeleteSchedulingUser.java,0.8,"This code directly interacts with the 'SchedulingUser' concept by providing a mechanism to delete it. The presence of `DeleteSchedulingUserRequestModel` and `schedulingGateway.deleteUser` clearly indicates its role in managing scheduling users, which is a core part of the described 'Scheduling' feature. The `SchedulingGateway` suggests persistence and management of these entities.",1903,Scheduling/DeleteSchedulingUser.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/AddSchedulingUser.java,AddSchedulingUser.java,0.9,"This code directly implements the creation of a 'SchedulingUser', which is a core component of the 'Scheduling' concept. It handles validation, persistence via a gateway, and response generation for adding a user involved in scheduling.",2085,Scheduling/AddSchedulingUser.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingDateRequestModel.java,AddSchedulingDateRequestModel.java,0.6,"This `RequestModel` is clearly related to adding a scheduling date, which is a core part of the ""Scheduling"" concept. It contains `schedulingId` and `dateTitle`, indicating intent to associate a date with a specific scheduling instance. However, it's only a small piece of the overall concept, lacking voting, user association, or the actual date value itself.",227,Scheduling/AddSchedulingDateRequestModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/inmemory/InMemorySchedulingGateway.java,InMemorySchedulingGateway.java,1.0,"The code clearly implements the 'Scheduling' concept. It manages 'Scheduling' entities, allows creation of 'SchedulingDate' and 'SchedulingUser' objects, and supports voting (YES, NO, MAYBE) on dates. The `InMemorySchedulingGateway` acts as a data store for these entities, aligning perfectly with the described functionality of proposing and voting on dates for an event.",4275,Scheduling/InMemorySchedulingGateway.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingDatesResource.java,SchedulingDatesResource.java,0.8,"This code directly relates to the ""Scheduling"" concept by providing an endpoint to ""addSchedulingDate"". It uses `schedulingid` and `dateTitle`, aligning with the idea of proposing dates for an event. The `SchedulingDateResource` further suggests handling individual proposed dates, reinforcing the concept's implementation.",1756,Scheduling/SchedulingDatesResource.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/VoteOption.java,VoteOption.java,0.8,"This enum directly supports the ""voting"" aspect of the scheduling concept by defining the possible choices a user can make when voting on a date. It's a fundamental building block for the voting mechanism.",101,Scheduling/VoteOption.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/aws/DynamoDbSchedulingGateway.java,DynamoDbSchedulingGateway.java,0.9,"The code directly implements the 'Scheduling' concept by managing 'Scheduling' entities, 'SchedulingDate' (for proposed dates), and 'SchedulingUser' (implicitly via CreatorGateway and vote lists). It handles creation, reading, and voting mechanisms (YES, NO, MAYBE) for dates, and setting a final date, aligning perfectly with the concept's description.",14512,Scheduling/DynamoDbSchedulingGateway.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/VoteForSchedulingDateResponseModel.java,VoteForSchedulingDateResponseModel.java,0.1,"This file is an empty response model. While its name suggests a connection to ""scheduling"" and ""voting for dates,"" it contains no implementation details, data, or logic that would meaningfully represent or contribute to the described scheduling concept. It's merely a placeholder.",174,Scheduling/VoteForSchedulingDateResponseModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingResource.java,SchedulingResource.java,0.9,"This `SchedulingResource` clearly acts as the REST API entry point for the 'Scheduling' concept. It exposes endpoints for retrieving scheduling details (`getScheduling`), and sub-resources for 'users' and 'dates', directly aligning with the described components of the scheduling feature (proposing/voting on dates, involving users). The use of `GetSchedulingRequestModel` and `GetSchedulingResponseModel` further confirms its role in handling scheduling-related data.",1673,Scheduling/SchedulingResource.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/SetFinalDate.java,SetFinalDate.java,0.9,"This code directly implements the ""set final date"" aspect of scheduling. It interacts with a `SchedulingGateway` to mark a specific `SchedulingDate` as final for a given `schedulingId`, which is a core part of deciding on a date for an event.",1058,Scheduling/SetFinalDate.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/AddScheduling.java,AddScheduling.java,0.6,"This code adds a ""scheduling widget"" to a site, which is a foundational step for the ""Scheduling"" concept. It handles the creation of a `Scheduling` entity. However, it doesn't directly show the ""propose and vote on dates"" or the ""SchedulingDate"" and ""SchedulingUser"" aspects, which are core to the concept's description. It sets up the container for scheduling, but not the full interaction.",2145,Scheduling/AddScheduling.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/pojo/PojoScheduling.java,PojoScheduling.java,0.9,"The `PojoScheduling` class directly implements the `Scheduling` interface and contains `PojoSchedulingUser` and `PojoSchedulingDate` lists, which are core components of the described scheduling concept (users proposing/voting on dates). It manages the collection of users and dates for a specific scheduling instance.",4470,Scheduling/PojoScheduling.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingUsersResource.java,SchedulingUsersResource.java,0.8,"This code directly relates to the ""SchedulingUser"" aspect of the ""Scheduling"" concept. It provides a REST endpoint to add a user to a scheduling event and retrieve a specific user resource, aligning with the idea of managing users involved in the scheduling process. The presence of `AddSchedulingUser` and `SchedulingUserResource` strongly indicates implementation of user management within scheduling.",1718,Scheduling/SchedulingUsersResource.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingsRequestModel.java,GetSchedulingsRequestModel.java,0.1,"This class is merely a request model for retrieving schedulings, inheriting from a generic `SiteDependentRequestModel`. It contains no specific logic, data, or structure that directly implements the core ""scheduling"" concept of proposing/voting on dates, or defining `SchedulingDate`/`SchedulingUser`. Its role is too abstract to be considered an implementation of the described concept.",187,Scheduling/GetSchedulingsRequestModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/DateKey.java,DateKey.java,0.6,"This `DateKey` class appears to be a utility for generating unique keys related to scheduling dates, likely for storage or retrieval. While it doesn't directly represent a `SchedulingDate` or `SchedulingUser`, its purpose of creating identifiers for ""schedulingdateid"" strongly suggests it's a supporting component for the 'Scheduling' concept. The `schedulingId` and `count` imply a way to differentiate multiple dates within a scheduling context.",738,Scheduling/DateKey.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/delivery/rest/SchedulingsResource.java,SchedulingsResource.java,0.8,"This code, `SchedulingsResource.java`, acts as a REST endpoint for managing ""Schedulings"". It exposes operations to retrieve existing schedulings (`GET /`) and add new ones (`POST /`). The presence of `AddSchedulingRequestModel`, `AddSchedulingResponseModel`, `GetSchedulingsRequestModel`, `GetSchedulingsResponseModel`, and interactors like `AddScheduling` and `GetSchedulings` strongly indicates that the core ""Scheduling"" concept, as described (proposing/voting on dates for an event), is being handled by this layer. The `schedulingid` path parameter further suggests individual scheduling entities.",2298,Scheduling/SchedulingsResource.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/exception/DuplicateSchedulingPositionException.java,DuplicateSchedulingPositionException.java,0.8,"This code is an exception class specifically named `DuplicateSchedulingPositionException`. Its name directly references ""Scheduling"" and implies a problem related to the positioning of a ""scheduling widget,"" which aligns with the concept's need to manage scheduling elements. While it doesn't show the core logic, it's a clear supporting component for a scheduling feature.",465,Scheduling/DuplicateSchedulingPositionException.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/SchedulingKey.java,SchedulingKey.java,0.8,"This `SchedulingKey` class directly supports the ""Scheduling"" concept by providing a unique identifier for a `Scheduling` instance, composed of a `siteName` and a `count`. This aligns with the idea of coordinating events within a 'Site' and implicitly suggests multiple scheduling instances per site. The `getIdentifier()` and `getKV()` methods further solidify its role in uniquely identifying a scheduling entity.",1109,Scheduling/SchedulingKey.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingRequestModel.java,AddSchedulingRequestModel.java,0.2,"This class is a request model for adding *something* related to scheduling, but it lacks any fields directly representing dates, users, or voting mechanisms, which are core to the ""Scheduling"" concept as described. It's too high-level to confirm implementation.",269,Scheduling/AddSchedulingRequestModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingsResponseModel.java,GetSchedulingsResponseModel.java,0.2,"This class is a response model for retrieving schedulings, indicating it's part of a system that *deals* with scheduling. However, it only contains IDs and positions, not the core data or logic related to proposing/voting on dates, or the 'SchedulingDate'/'SchedulingUser' concepts. It's a very superficial representation of the concept.",277,Scheduling/GetSchedulingsResponseModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/SchedulingUser.java,SchedulingUser.java,0.7,"This interface defines a `SchedulingUser`, which is a core component of the 'Scheduling' concept. It provides methods to identify and name a user involved in scheduling, directly aligning with the description's mention of 'SchedulingUser' as part of the mechanism for coordinating event dates. However, it's only one piece of the puzzle, not the full implementation of scheduling.",128,Scheduling/SchedulingUser.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/DeleteSchedulingUserResponseModel.java,DeleteSchedulingUserResponseModel.java,0.1,"This file is an empty response model for deleting a scheduling user. While it's part of the 'scheduling' package, it provides no direct implementation or logic related to the core 'Scheduling' concept of proposing and voting on dates. Its existence merely hints at a related operation, but doesn't embody the concept itself.",173,Scheduling/DeleteSchedulingUserResponseModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/SchedulingGateway.java,SchedulingGateway.java,0.9,"This `SchedulingGateway` interface directly exposes methods for managing `Scheduling`, `SchedulingDate`, and `SchedulingUser` entities, including creation, reading, and voting mechanisms (YES, NO, MAYBE). This aligns very well with the described concept of allowing users to propose and vote on dates for an event. The `siteName` parameter also indicates integration with the 'Site' concept.",1961,Scheduling/SchedulingGateway.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/GetSchedulings.java,GetSchedulings.java,0.9,"This code directly interacts with `Scheduling` entities via a `SchedulingGateway` to retrieve a list of schedulings for a given site. This aligns perfectly with the ""Scheduling"" concept's role of managing event date coordination within a 'Site'.",1993,Scheduling/GetSchedulings.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/VoteForSchedulingDateRequestModel.java,VoteForSchedulingDateRequestModel.java,0.8,"This `RequestModel` directly supports the ""voting on dates"" aspect of the Scheduling concept. It contains fields for identifying the site, the specific scheduling event, the date being voted on, the user casting the vote, and the vote option itself, all of which are essential for implementing the described functionality.",366,Scheduling/VoteForSchedulingDateRequestModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/validation/SchedulingRequestValidator.java,SchedulingRequestValidator.java,0.9,"This code directly supports the ""Scheduling"" concept by validating requests related to scheduling operations. It checks for the existence of scheduling entities and their associated sites, ensuring data integrity for actions like adding dates, users, and voting, which are core to the described scheduling functionality.",6470,Scheduling/SchedulingRequestValidator.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/GetScheduling.java,GetScheduling.java,0.9,"This code clearly implements the ""Scheduling"" concept by retrieving and presenting data related to a `Scheduling` entity. It accesses `SchedulingDate` and `SchedulingUser` information, which are core components of the described concept, and handles the ""final date"" aspect. The interactor's role is to fetch and structure this scheduling-specific data.",3462,Scheduling/GetScheduling.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/VoteForSchedulingDate.java,VoteForSchedulingDate.java,0.9,"This code directly implements the ""voting"" aspect of the ""Scheduling"" concept. It takes a user's vote (YES, NO, MAYBE) for a specific scheduling date within a scheduling event and persists it via a gateway. This aligns perfectly with the described mechanism of users voting on dates.",1992,Scheduling/VoteForSchedulingDate.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingRequestModel.java,GetSchedulingRequestModel.java,0.2,"This file is a request model for retrieving scheduling information. While it contains fields like `schedulingIdentifier` and `position` which hint at scheduling, it doesn't directly implement the core mechanics of proposing or voting on dates, nor does it define `SchedulingDate` or `SchedulingUser`. It's merely a data carrier for a request related to scheduling.",256,Scheduling/GetSchedulingRequestModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/SetFinalDateRequestModel.java,SetFinalDateRequestModel.java,0.6,"This `RequestModel` directly references `schedulingId` and `schedulingDateId`, indicating its role in setting a final date for a scheduling process. While it doesn't show the full mechanism, its parameters align with the concept's intent.",257,Scheduling/SetFinalDateRequestModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/exception/DuplicateKeyException.java,DuplicateKeyException.java,0.1,"This file defines a specific exception type, `DuplicateKeyException`, which is a common utility in many systems. While it resides within a 'scheduling' package, its content does not directly implement any part of the described scheduling *mechanism* (proposing/voting on dates, `SchedulingDate`, `SchedulingUser`). It's a supporting component, not an implementation of the core concept itself.",412,Scheduling/DuplicateKeyException.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/interactor/GetSchedulingDate.java,GetSchedulingDate.java,0.9,"This code directly interacts with `Scheduling` and `SchedulingDate` entities, which are core components of the described ""Scheduling"" concept. It retrieves a specific `SchedulingDate` and its associated vote lists (YES, NO, MAYBE), directly supporting the idea of users proposing and voting on dates for an event.",2587,Scheduling/GetSchedulingDate.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/pojo/PojoSchedulingUser.java,PojoSchedulingUser.java,1.0,"This `PojoSchedulingUser` class directly implements the `SchedulingUser` interface, providing concrete fields for `id` and `name`. It clearly represents the ""SchedulingUser"" concept as described, fulfilling its role within the scheduling feature by holding user identification and name information.",480,Scheduling/PojoSchedulingUser.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingDateResponseModel.java,GetSchedulingDateResponseModel.java,0.7,"This code snippet is a response model for retrieving scheduling date information. It contains fields like `title`, `YESlist`, `NOlist`, and `MAYBElist`, which directly relate to the voting mechanism described in the 'Scheduling' concept. While it doesn't show the full implementation of proposing or voting, it clearly represents the outcome of such a process for a specific date.",318,Scheduling/GetSchedulingDateResponseModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/gateway/LoadSchedulingDate.java,LoadSchedulingDate.java,0.9,"This code directly interacts with `Scheduling` and `SchedulingDate` entities, which are core to the 'Scheduling' concept. It provides a mechanism to retrieve a specific `SchedulingDate` from a `Scheduling` object, aligning with the idea of managing dates for an event. The exception thrown also indicates a failure to find a persistent scheduling date, reinforcing its role in data retrieval for the scheduling feature.",738,Scheduling/LoadSchedulingDate.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/entity/pojo/PojoSchedulingDate.java,PojoSchedulingDate.java,0.9,"This class, `PojoSchedulingDate`, directly implements the `SchedulingDate` interface, which is a core component of the ""Scheduling"" concept. It manages a title, an ID, and lists for 'yes', 'no', and 'maybe' votes, directly reflecting the mechanism for users to vote on a proposed date. The constructors and methods clearly align with the described functionality of a scheduling date.",1889,Scheduling/PojoSchedulingDate.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingResponseModel.java,AddSchedulingResponseModel.java,0.1,"This file is a simple response model for adding a scheduling entry, containing only an ID. It provides no direct implementation of the ""scheduling"" concept as described (proposing/voting on dates, 'SchedulingDate', 'SchedulingUser'). It's merely a data carrier for a result.",198,Scheduling/AddSchedulingResponseModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingUserRequestModel.java,AddSchedulingUserRequestModel.java,0.7,"This `RequestModel` is clearly intended for adding a user to a scheduling process, as indicated by `AddSchedulingUser` in its name and the `schedulingId` field. This directly aligns with the ""SchedulingUser"" concept and the mechanism of coordinating users for an event. While it's only a small part of the overall scheduling feature, its purpose is unambiguous.",222,Scheduling/AddSchedulingUserRequestModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/GetSchedulingResponseModel.java,GetSchedulingResponseModel.java,0.2,"This class is a *response model* for retrieving scheduling information. While it contains fields like `dateTitles`, `dateIds`, `userNames`, and `userIds` which are related to the concept, it doesn't *implement* the scheduling mechanism itself (proposing, voting). It merely represents data *about* a scheduling event. The core logic for ""proposing and voting on dates"" is missing.",416,Scheduling/GetSchedulingResponseModel.java
business,Scheduling,The 'Scheduling' feature allows users to propose and vote on dates for an event. It includes concepts like 'SchedulingDate' and 'SchedulingUser'.,../../../dropover-at/backend/src/main/java/at/dropover/scheduling/boundary/AddSchedulingDateResponseModel.java,AddSchedulingDateResponseModel.java,0.6,"This class is a response model for adding a scheduling date, which directly relates to the ""Scheduling"" concept. It contains `dateId` and `isFinal` fields, indicating a date's unique identifier and its finality, both relevant to proposing and deciding on dates. However, it's only a small part of the overall scheduling mechanism.",223,Scheduling/AddSchedulingDateResponseModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/GetTodo.java,GetTodo.java,0.8,This code retrieves a single 'Todo' item from a specific 'TodoList' within a 'Site'. It directly supports the management of individual 'Todo' items within the larger 'Todo List' concept.,2149,Todo List/GetTodo.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodosRequestModel.java,GetTodosRequestModel.java,0.1,"This file is an empty request model for retrieving todos. While it extends `SiteDependentRequestModel`, which hints at the ""Site"" aspect, it contains no specific fields or logic related to ""Todo Lists"" or ""Todo items"" themselves, nor does it define how multiple lists are managed. It's merely a placeholder for a request.",175,Todo List/GetTodosRequestModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/aws/DynamoDbTodoGateway.java,DynamoDbTodoGateway.java,0.9,"The code clearly implements the concept of a Todo List. It manages `Todo` items within `TodoList` objects, supports creating, updating, and deleting both individual todos and entire todo lists. The `siteName` parameter further suggests the ability to manage multiple todo lists within a 'Site', aligning perfectly with the concept description.",8135,Todo List/DynamoDbTodoGateway.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/GetAllTodoLists.java,GetAllTodoLists.java,0.8,"This code retrieves a list of `TodoList` objects based on a `siteName`, which directly supports the concept of managing multiple todo lists within a 'Site'. It interacts with a `TodoGateway` to fetch the data, indicating a clear mechanism for accessing todo lists. The response, however, only returns `position` (likely an ID) of the `TodoList` objects, not the full `TodoList` itself, which is a slight deviation from fully implementing the ""collection of Todo items"" aspect of a TodoList.",1498,Todo List/GetAllTodoLists.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/AddTodo.java,AddTodo.java,0.9,"This code directly implements the ""Add Todo"" functionality, which is a core part of a Todo List system. It handles creating a new Todo item, associating it with a specific TodoList within a Site, and persisting it. The presence of `Todo`, `TodoList`, and `TodoGateway` entities/interfaces strongly aligns with the concept's description.",2431,Todo List/AddTodo.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodosResponseModel.java,GetTodosResponseModel.java,0.5,"This file is a response model for retrieving todos, containing a list of `TodoData`. While it's a component of a Todo List system, it doesn't *implement* the concept of a ""Todo List"" itself (a collection of Todo items, managed by users within a Site). It merely represents the data returned when querying for todos.",214,Todo List/GetTodosResponseModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetAllTodosResponse.java,GetAllTodosResponse.java,0.2,"This file is a response model for retrieving *all* todos, which is a component of a Todo List system. However, it doesn't directly implement the concept of a ""Todo List"" itself (a collection of todos, potentially multiple lists, within a site). It's merely a data carrier for a list of `TodoData`.",209,Todo List/GetAllTodosResponse.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/inmemory/InMemoryTodoGateway.java,InMemoryTodoGateway.java,1.0,"The code clearly implements the concept. It manages `Todo` items within `TodoList` objects, and these `TodoList` objects are associated with a `siteName`, fulfilling the ""multiple todo lists within a 'Site'"" requirement. The `InMemoryTodoGateway` acts as a persistence layer for these entities.",4818,Todo List/InMemoryTodoGateway.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodoRequestModel.java,GetTodoRequestModel.java,0.1,"This file defines a request model for retrieving a single todo item, likely by its position. While it's a small part of a larger 'Todo List' system, this specific file alone does not implement the concept of a 'Todo List' (a collection of todos) or the broader 'Site' concept. It's a single data structure for a specific operation within such a system.",123,Todo List/GetTodoRequestModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodoListResponseModel.java,GetTodoListResponseModel.java,0.9,"This `ResponseModel` clearly represents a single ""Todo List"" by containing an `id`, `title`, and a `List` of `TodoData` (presumably individual todo items). This directly aligns with the concept's definition of a ""Todo List"" being a collection of ""Todo"" items. The ""Site"" and ""multiple todo lists"" aspects are not directly visible in this single file, but this file perfectly represents one instance of a ""Todo List"".",259,Todo List/GetTodoListResponseModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/exception/TodoNotFoundException.java,TodoNotFoundException.java,0.1,"This file defines a specific exception for when a 'Todo' item is not found. While it relates to the 'Todo List' concept by handling an error within it, it does not *implement* the core functionality of a Todo List (creating, managing, or collecting items). It's a supporting component, not an implementation of the concept itself.",404,Todo List/TodoNotFoundException.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodoResource.java,TodoResource.java,0.8,"The code clearly handles individual 'Todo' items (creation, retrieval, update, deletion) within a specific 'TodoList' and 'Site'. The presence of `siteName`, `listName`, and `todoId` in the constructor and request models directly supports the hierarchical structure described in the concept. However, the code provided is for a single `TodoResource`, not the overarching `TodoList` or `Site` management, hence not a full 1.0.",4729,Todo List/TodoResource.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/GetTodoList.java,GetTodoList.java,1.0,"This code explicitly retrieves a `TodoList` based on `siteName` and `todoListId`, then converts its contained `Todo` items into `TodoData` for a response. This directly aligns with the concept of managing multiple todo lists within a site.",2197,Todo List/GetTodoList.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodolistResource.java,TodolistResource.java,0.9,"This `TodolistResource` class clearly represents a single ""Todo List"" within a ""Site"". It provides REST endpoints for retrieving and deleting a specific todo list, and a sub-resource for managing ""Todo"" items within that list, aligning perfectly with the concept's description.",1979,Todo List/TodolistResource.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetTodoListRequestModel.java,GetTodoListRequestModel.java,0.1,"This file is an empty class extending `TodoRequestModel`. It provides no implementation or specific attributes related to retrieving a ""Todo List"" beyond its name. It's a placeholder, not an implementation.",103,Todo List/GetTodoListRequestModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/TodoKey.java,TodoKey.java,0.8,"This `TodoKey` class directly supports the concept by providing a unique identifier for a 'Todo' item within a specific 'Todo List' and 'Site'. It encapsulates the hierarchical structure (Site -> List -> Todo) described in the concept, allowing for the identification and management of individual todo items across multiple lists and sites. The parsing and string conversion methods further reinforce its role as a key for this hierarchical structure.",1290,Todo List/TodoKey.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodosResource.java,TodosResource.java,0.9,"The code clearly implements a ""Todo List"" concept. It manages a collection of ""Todo"" items (add, get all, get specific todo) within a specific ""listName"" (which represents a Todo List) and ""siteName"" (representing a Site). The `TodosResource` acts as the entry point for managing todos within a given list.",2819,Todo List/TodosResource.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/pojo/PojoTodo.java,PojoTodo.java,1.0,"This file defines `PojoTodo`, which is a concrete implementation of the `Todo` interface. It contains attributes like `text`, `done`, `dueDate`, and `responsiblePerson`, all of which are characteristic properties of a single ""Todo"" item as described in the concept. The class clearly represents an individual task.",2055,Todo List/PojoTodo.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/ChangeTodo.java,ChangeTodo.java,0.7,"This code implements the ""change"" operation for a single ""Todo"" item within a ""TodoList"" associated with a ""Site"". It handles updating properties like text, done status, and responsible person. While it doesn't manage multiple lists or sites directly, it operates within the context of a specific TodoList and Site, which are core components of the described concept.",2618,Todo List/ChangeTodo.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/AddTodoRequestModel.java,AddTodoRequestModel.java,0.4,"This file defines a request model for adding a single 'Todo' item, which is a component of a 'Todo List'. However, it doesn't directly implement the 'Todo List' concept itself, nor does it show how multiple lists are managed within a 'Site'. It's a building block, not the full concept.",239,Todo List/AddTodoRequestModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/DeleteTodoListRequestModel.java,DeleteTodoListRequestModel.java,0.1,"This file defines a request model for deleting a todo list. While it's a component of a system that *might* implement the concept, this specific file alone provides no direct evidence of a ""Todo List"" as a collection of ""Todo"" items, or the ability to manage multiple lists within a ""Site"". It's merely a data structure for a delete operation.",105,Todo List/DeleteTodoListRequestModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/TodoData.java,TodoData.java,0.8,"This `TodoData` class clearly defines the attributes of a single 'Todo' item, such as text, due date, and completion status. It's a fundamental building block for a 'Todo List' system, even if it doesn't represent the list or site itself.",301,Todo List/TodoData.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/TodoRequestModel.java,TodoRequestModel.java,0.2,"This file is a request model for a Todo, inheriting from SiteDependentRequestModel and containing a `todoListId`. While it hints at the existence of Todo Lists and their relation to a Site, it doesn't implement the core concept of a ""Todo List"" itself (a collection of Todos) or the management of multiple lists. It's a small piece of a larger puzzle, but not the concept itself.",203,Todo List/TodoRequestModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetAllTodoListsResponse.java,GetAllTodoListsResponse.java,0.5,"This class is a `ResponseModel` containing a `List<Integer>` named `todoLists`. While it clearly relates to ""Todo Lists"" and is a response, the use of `Integer` for `todoLists` is ambiguous. It could represent IDs, counts, or something else, making it uncertain if it fully represents a ""collection of 'Todo' items"" or just references to them. It's a partial implementation of the concept's data representation.",216,Todo List/GetAllTodoListsResponse.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/Todo.java,Todo.java,0.5,"This code defines a `Todo` interface, which is a fundamental building block for a ""Todo List"" concept. It specifies attributes like text, done status, and due date, directly aligning with what a single todo item should represent. However, it only defines the *item* itself, not the *list* or *site* aspects mentioned in the concept description.",217,Todo List/Todo.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/ChangeTodoRequestModel.java,ChangeTodoRequestModel.java,0.2,"This file defines a request model for changing a 'Todo' item, which is a component of a 'Todo List'. However, it does not directly implement the 'Todo List' concept itself, nor does it show how multiple lists are managed within a 'Site'. It's a small piece of a larger system that *would* implement the concept.",275,Todo List/ChangeTodoRequestModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/pojo/PojoTodoList.java,PojoTodoList.java,0.8,"This code implements a `TodoList` which holds a `List<Todo>` and has a `title`. This directly aligns with the concept of a ""Todo List"" as a collection of ""Todo"" items. The ""Site"" and ""multiple todo lists"" aspects are not visible in this single class but are implied by the `PojoTodoList` name and the `id` (position) field.",1156,Todo List/PojoTodoList.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/DeleteTodoListResponseModel.java,DeleteTodoListResponseModel.java,0.5,"This file is a `ResponseModel` for deleting a `TodoList`. While it directly relates to the ""Todo List"" concept, it's an empty marker interface implementation. It signifies the *intent* of deleting a todo list but doesn't *implement* any part of the list's structure or management itself. Its role is purely a response object for an operation on a todo list.",161,Todo List/DeleteTodoListResponseModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/validation/TodoValidation.java,TodoValidation.java,0.8,"This code is a validation class for Todo and TodoList entities. It validates properties like position, text, and the existence of Todos within a TodoList. It also includes validation for 'Site' and 'listTitle', which aligns with the concept's description of managing multiple todo lists within a 'Site'. While it doesn't *implement* the full CRUD operations for a Todo List, it provides essential validation logic that directly supports the creation and management of such a system, demonstrating a clear understanding of the concept's components.",2803,Todo List/TodoValidation.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/DeleteTodoResponseModel.java,DeleteTodoResponseModel.java,0.1,"This file defines a response model for deleting a Todo item. While it's a component *related* to a Todo List system, it doesn't *implement* the core concept of a ""Todo List"" itself (collection of Todos, user management, site context). It's a small piece of a larger system that would implement the concept.",157,Todo List/DeleteTodoResponseModel.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/DeleteTodo.java,DeleteTodo.java,0.8,"This code implements the deletion of a single 'Todo' item within a specific 'TodoList' and 'Site', which is a core operation for managing a 'Todo List' system. The parameters `siteName`, `todoListId`, and `position` directly align with the concept's structure.",1067,Todo List/DeleteTodo.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetAllTodoListsRequest.java,GetAllTodoListsRequest.java,0.5,"This class is named `GetAllTodoListsRequest` and extends `SiteDependentRequestModel`, suggesting it's part of a system to retrieve todo lists associated with a site. While it doesn't contain the logic itself, its name and inheritance strongly imply its role in implementing the ""Todo List"" concept, specifically the ""collection of 'Todo' items"" and ""multiple todo lists within a 'Site'"" aspects. However, as an empty request model, it only represents the *intent* of fetching, not the implementation of the lists themselves.",177,Todo List/GetAllTodoListsRequest.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/gateway/TodoGateway.java,TodoGateway.java,1.0,"This `TodoGateway` interface clearly defines methods for managing `Todo` items and `TodoList` entities, including creating, updating, and deleting both individual todos and entire todo lists. It also incorporates the `siteName` parameter, aligning with the concept's requirement for managing multiple todo lists within a 'Site'.",1264,Todo List/TodoGateway.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/AddTodoListRequest.java,AddTodoListRequest.java,0.8,"This code defines a request model for adding a ""TodoList"" within a ""Site"", which directly aligns with the concept's description of managing multiple todo lists within a site. It's a foundational piece for implementing the ""Todo List"" part of the concept.",201,Todo List/AddTodoListRequest.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/delivery/rest/TodolistsResource.java,TodolistsResource.java,1.0,"This code clearly implements the ""Todo List"" concept. It manages multiple todo lists within a ""Site"" (represented by `siteName`), allows creation of new lists (`addTodoList`), and provides access to individual lists (`getTodoList`). The `TodolistsResource` acts as the collection of todo lists, fulfilling the core requirements of the concept.",2347,Todo List/TodolistsResource.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/entity/TodoList.java,TodoList.java,0.9,"This interface clearly defines a ""TodoList"" with a title, a position (implying order or display), and a list of ""Todo"" items. This directly aligns with the concept of a collection of Todo items. The ""Site"" aspect is not visible in this single file, but the core ""TodoList"" concept is well-represented.",164,Todo List/TodoList.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/GetAllTodosRequest.java,GetAllTodosRequest.java,0.1,"This file is an empty class extending `TodoRequestModel`. It provides no implementation for managing multiple todo lists within a site, nor does it even define a single todo list or todo item. It's merely a placeholder for a request.",97,Todo List/GetAllTodosRequest.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/exception/TodoListNotPersistedException.java,TodoListNotPersistedException.java,0.1,"This file defines an exception for a `TodoList` not being persisted. While it references `TodoList` and `Site`, it doesn't implement the core functionality of a ""Todo List"" (creating, managing, or collecting items). It's a supporting component, not the implementation itself.",435,Todo List/TodoListNotPersistedException.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/AddTodoList.java,AddTodoList.java,1.0,"This code directly implements the creation of a ""Todo List"" within a ""Site"" by handling the request, validating it, persisting the new list via a gateway, and returning a response. It aligns perfectly with the ""create and manage multiple todo lists within a 'Site'"" aspect of the concept.",1823,Todo List/AddTodoList.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/GetAllTodos.java,GetAllTodos.java,0.8,"This code retrieves all todos for a specific `TodoList` within a `Site` (implied by `siteName` in the request). It clearly handles the ""collection of 'Todo' items"" aspect and the ""multiple todo lists"" within a ""Site"" by requiring `siteName` and `todoListId`. The ""create and manage"" part is not directly in this ""GetAllTodos"" interactor, but the structure supports it.",2071,Todo List/GetAllTodos.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/DeleteTodoList.java,DeleteTodoList.java,1.0,"This code explicitly implements the deletion of a ""Todo List"" within a ""Site"", which is a core part of managing multiple todo lists as described in the concept. It uses a `TodoGateway` to perform the deletion based on `siteName` and `todoListId`, directly aligning with the concept's requirements.",1085,Todo List/DeleteTodoList.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/boundary/AddTodoListResponse.java,AddTodoListResponse.java,0.1,"This file is a simple data transfer object (DTO) for a response, containing only a `listId`. While it's *part* of a system that might implement a Todo List concept, this specific file alone provides almost no implementation of the concept itself. It merely suggests the existence of a list ID.",175,Todo List/AddTodoListResponse.java
business,Todo List,A 'Todo List' is a collection of 'Todo' items. Users can create and manage multiple todo lists within a 'Site'.,../../../dropover-at/backend/src/main/java/at/dropover/todo/interactor/validation/TodoRequestValidator.java,TodoRequestValidator.java,0.1,"This file is a validator for `TodoRequestModel` and checks if a `TodoList` exists. It does not implement the core concept of a ""Todo List"" itself (creating, managing, or storing todo items/lists), but rather a small part of its validation logic.",1275,Todo List/TodoRequestValidator.java
business,Mail Notification,The application can send email notifications to a 'Creator'. This is used to inform users about events or actions related to their content.,../../../dropover-at/backend/src/main/java/at/dropover/mail/boundary/SendMailToCreatorRequestModel.java,SendMailToCreatorRequestModel.java,0.9,"This `RequestModel` clearly defines the necessary parameters for sending an email notification to a 'Creator'. It includes event type, site name, responsible user, content, and locale, all directly supporting the concept of informing users about events related to their content. The name `SendMailToCreatorRequestModel` explicitly links it to the concept.",464,Mail Notification/SendMailToCreatorRequestModel.java
business,Mail Notification,The application can send email notifications to a 'Creator'. This is used to inform users about events or actions related to their content.,../../../dropover-at/backend/src/main/java/at/dropover/mail/interactor/validation/SendMailValidation.java,SendMailValidation.java,0.1,"This file is a validation class for sending mail, inheriting from a site-dependent validator. While it's *related* to mail notification, it doesn't contain any logic for *sending* emails, *identifying* the 'Creator', or *defining* the notification content. It's merely a structural component within a larger mail-related module.",381,Mail Notification/SendMailValidation.java
business,Mail Notification,The application can send email notifications to a 'Creator'. This is used to inform users about events or actions related to their content.,../../../dropover-at/backend/src/main/java/at/dropover/mail/entity/channel/common/MailChannelValidator.java,MailChannelValidator.java,0.2,"This file is a `MailChannelValidator`. It validates email addresses and checks for null/empty strings. While validation is a necessary part of sending emails, this specific file *only* handles validation and does not contain any logic for sending notifications, constructing email content, or interacting with an email service. It's a small piece of a larger mail notification system, but by itself, it does not implement the concept.",843,Mail Notification/MailChannelValidator.java
business,Mail Notification,The application can send email notifications to a 'Creator'. This is used to inform users about events or actions related to their content.,../../../dropover-at/backend/src/main/java/at/dropover/mail/boundary/SendMailToCreatorResponseModel.java,SendMailToCreatorResponseModel.java,0.1,"This file is an empty `ResponseModel` for sending mail to a creator. It defines a data structure for a response, but contains no logic or implementation related to the actual sending of email, nor does it provide any details about the content or recipient of the mail. It's merely a placeholder or a very minimal part of a larger system that *might* implement the concept.",164,Mail Notification/SendMailToCreatorResponseModel.java
business,Mail Notification,The application can send email notifications to a 'Creator'. This is used to inform users about events or actions related to their content.,../../../dropover-at/backend/src/main/java/at/dropover/mail/entity/channel/MailChannel.java,MailChannel.java,0.6,"This interface defines methods for sending mail, which is a core mechanism for mail notification. It includes parameters for 'to' recipients, including a list of 'Creator' objects, directly aligning with the concept's need to inform users (Creators) about events. However, it's just an interface, so it doesn't *implement* the sending itself, only defines the contract.",310,Mail Notification/MailChannel.java
business,Mail Notification,The application can send email notifications to a 'Creator'. This is used to inform users about events or actions related to their content.,../../../dropover-at/backend/src/main/java/at/dropover/mail/entity/channel/inmemory/InMemoryMailChannel.java,InMemoryMailChannel.java,0.1,"This code implements an `InMemoryMailChannel`, which stores mail content in a list rather than actually sending it. While it has the `sendMail` method signature, its mechanism is for testing/mocking, not for real email notification to a 'Creator' as described in the concept. It does not fulfill the ""communication with users"" aspect.",1468,Mail Notification/InMemoryMailChannel.java
business,Mail Notification,The application can send email notifications to a 'Creator'. This is used to inform users about events or actions related to their content.,../../../dropover-at/backend/src/main/java/at/dropover/mail/interactor/SendMailToCreator.java,SendMailToCreator.java,0.9,"The code clearly implements the concept of sending email notifications to a 'Creator'. It uses a `MailChannel` to send emails, retrieves `Creator` entities, and constructs email content based on events. The `doSync` method directly handles the mail sending logic, fulfilling the described purpose. The `MethodInterceptor` aspect is a bit unusual for a direct interactor, but the core mail sending functionality is present and aligns with the concept.",4253,Mail Notification/SendMailToCreator.java
business,Mail Notification,The application can send email notifications to a 'Creator'. This is used to inform users about events or actions related to their content.,../../../dropover-at/backend/src/main/java/at/dropover/mail/entity/channel/email/EmailChannel.java,EmailChannel.java,1.0,"The `EmailChannel` class directly implements the sending of email notifications. It takes recipient `Creator` objects, extracts their email addresses, and uses Apache Commons Email to send messages. The configuration for the SMTP server is loaded, and methods for sending to single or multiple recipients are provided, directly fulfilling the concept's requirements.",3680,Mail Notification/EmailChannel.java
